{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { mapState } from 'vuex';\n\n// pdf.js\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf';\nimport pdfWorker from 'pdfjs-dist/build/pdf.worker?url';\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\nexport default {\n  name: 'OcrResults',\n  data() {\n    return {\n      doc: null,\n      pages: [],\n      // [{ num, highlight, charCount }]\n      pageRefs: {},\n      // num -> HTMLElement\n      canvasRefs: {},\n      // num -> HTMLCanvasElement\n      totalChars: 0,\n      cumulativeChars: [],\n      // 每页累计字符数（前缀和）\n      hoverIndex: -1\n    };\n  },\n  computed: {\n    ...mapState(['ocrResults', 'uploadedFileUrl']),\n    pdfUrl() {\n      // 优先 Vuex；兜底取 sessionStorage\n      return this.uploadedFileUrl || sessionStorage.getItem('uploadedFileUrl') || '';\n    },\n    latexText() {\n      return this.ocrResults && this.ocrResults.text || '';\n    },\n    latexLines() {\n      // 保证健壮\n      return (this.latexText || '').split('\\n');\n    }\n  },\n  mounted() {\n    if (this.pdfUrl) {\n      this.loadPdf();\n    }\n  },\n  methods: {\n    async loadPdf() {\n      try {\n        this.doc = await pdfjsLib.getDocument(this.pdfUrl).promise;\n        const numPages = this.doc.numPages;\n        this.pages = Array.from({\n          length: numPages\n        }, (_, i) => ({\n          num: i + 1,\n          highlight: false,\n          charCount: 0\n        }));\n        await this.renderAllPages();\n        await this.calcPageCharCounts();\n      } catch (e) {\n        console.error('加载 PDF 失败：', e);\n      }\n    },\n    async renderAllPages() {\n      // 逐页渲染\n      for (const p of this.pages) {\n        const page = await this.doc.getPage(p.num);\n        const viewport = page.getViewport({\n          scale: 1.25\n        });\n        const canvas = this.canvasRefs[p.num];\n        const ctx = canvas.getContext('2d');\n        canvas.width = viewport.width;\n        canvas.height = viewport.height;\n        await page.render({\n          canvasContext: ctx,\n          viewport\n        }).promise;\n      }\n    },\n    async calcPageCharCounts() {\n      // 统计每页文字字符数，建立累计数组用于映射\n      let total = 0;\n      const prefix = [];\n      for (const p of this.pages) {\n        const page = await this.doc.getPage(p.num);\n        const content = await page.getTextContent({\n          normalizeWhitespace: true\n        });\n        const chars = content.items.map(it => it.str || '').join('').length;\n        p.charCount = chars;\n        total += chars;\n        prefix.push(total);\n      }\n      this.totalChars = total;\n      this.cumulativeChars = prefix;\n    },\n    setPageRef(el) {\n      if (!el) return;\n      // el 结构：div.pdf-page\n      const idx = Array.from(el.parentNode.children).indexOf(el) + 1;\n      this.pageRefs[idx] = el;\n    },\n    setCanvasRef(el, num) {\n      if (el) this.canvasRefs[num] = el;\n    },\n    // 把右侧的行号，近似映射到 PDF 的页号\n    lineToPage(lineIndex) {\n      if (!this.totalChars || !this.latexLines.length) return 1;\n      const ratio = Math.min(1, Math.max(0, lineIndex / this.latexLines.length));\n      const targetChar = Math.floor(ratio * this.totalChars);\n\n      // 二分/顺序查找所在页\n      let pageNum = 1;\n      for (let i = 0; i < this.cumulativeChars.length; i++) {\n        if (targetChar <= this.cumulativeChars[i]) {\n          pageNum = i + 1;\n          break;\n        }\n      }\n      return pageNum;\n    },\n    onHoverLine(idx) {\n      this.hoverIndex = idx;\n      const pageNum = this.lineToPage(idx);\n      const el = this.pageRefs[pageNum];\n      if (el && this.$refs.pdfScroll) {\n        // 滚动到该页\n        const parent = this.$refs.pdfScroll;\n        parent.scrollTo({\n          top: el.offsetTop - 12,\n          behavior: 'smooth'\n        });\n        // 高亮闪烁\n        this.flashPage(pageNum);\n      }\n    },\n    onLeaveLine() {\n      this.hoverIndex = -1;\n    },\n    flashPage(pageNum) {\n      const p = this.pages.find(x => x.num === pageNum);\n      if (!p) return;\n      p.highlight = true;\n      setTimeout(() => {\n        p.highlight = false;\n      }, 500);\n    },\n    goBack() {\n      this.$store.commit('resetState');\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["mapState","pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","name","data","doc","pages","pageRefs","canvasRefs","totalChars","cumulativeChars","hoverIndex","computed","pdfUrl","uploadedFileUrl","sessionStorage","getItem","latexText","ocrResults","text","latexLines","split","mounted","loadPdf","methods","getDocument","promise","numPages","Array","from","length","_","i","num","highlight","charCount","renderAllPages","calcPageCharCounts","e","console","error","p","page","getPage","viewport","getViewport","scale","canvas","ctx","getContext","width","height","render","canvasContext","total","prefix","content","getTextContent","normalizeWhitespace","chars","items","map","it","str","join","push","setPageRef","el","idx","parentNode","children","indexOf","setCanvasRef","lineToPage","lineIndex","ratio","Math","min","max","targetChar","floor","pageNum","onHoverLine","$refs","pdfScroll","parent","scrollTo","top","offsetTop","behavior","flashPage","onLeaveLine","find","x","setTimeout","goBack","$store","commit","$router"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results-page\">\r\n    <h2>OCR 结果</h2>\r\n\r\n    <div class=\"two-cols\">\r\n      <!-- 左：PDF 输入 -->\r\n      <div class=\"panel\">\r\n        <div class=\"panel-title\">📄 PDF 输入</div>\r\n\r\n        <div v-if=\"!pdfUrl\" class=\"empty\">\r\n          未找到 PDF 预览，请返回重新上传。\r\n        </div>\r\n\r\n        <div v-else class=\"pdf-scroll\" ref=\"pdfScroll\">\r\n          <div\r\n            v-for=\"p in pages\"\r\n            :key=\"p.num\"\r\n            :ref=\"setPageRef\"\r\n            class=\"pdf-page\"\r\n            :class=\"{ 'page-highlight': p.highlight }\"\r\n          >\r\n            <canvas :ref=\"el => setCanvasRef(el, p.num)\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右：LaTeX 输出 -->\r\n      <div class=\"panel\">\r\n        <div class=\"panel-title\">🧮 LaTeX 输出</div>\r\n\r\n        <div v-if=\"!latexLines.length\" class=\"empty\">\r\n          暂无识别输出。\r\n        </div>\r\n\r\n        <pre v-else class=\"latex-block\">\r\n          <code>\r\n            <template v-for=\"(line, idx) in latexLines\" :key=\"idx\">\r\n              <div\r\n                class=\"latex-line\"\r\n                :class=\"{ active: hoverIndex === idx }\"\r\n                @mouseenter=\"onHoverLine(idx)\"\r\n                @mouseleave=\"onLeaveLine\"\r\n              >{{ line || ' ' }}</div>\r\n            </template>\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"toolbar\">\r\n      <button class=\"back\" @click=\"goBack\">返回重新处理</button>\r\n      <span class=\"hint\">提示：把鼠标移动到右侧任意一行，左侧会滚动到大致对应的 PDF 位置并高亮当前页。</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\n\r\n// pdf.js\r\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf'\r\nimport pdfWorker from 'pdfjs-dist/build/pdf.worker?url'\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker\r\n\r\nexport default {\r\n  name: 'OcrResults',\r\n  data() {\r\n    return {\r\n      doc: null,\r\n      pages: [],                 // [{ num, highlight, charCount }]\r\n      pageRefs: {},              // num -> HTMLElement\r\n      canvasRefs: {},            // num -> HTMLCanvasElement\r\n      totalChars: 0,\r\n      cumulativeChars: [],       // 每页累计字符数（前缀和）\r\n      hoverIndex: -1\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['ocrResults', 'uploadedFileUrl']),\r\n    pdfUrl() {\r\n      // 优先 Vuex；兜底取 sessionStorage\r\n      return this.uploadedFileUrl || sessionStorage.getItem('uploadedFileUrl') || ''\r\n    },\r\n    latexText() {\r\n      return (this.ocrResults && this.ocrResults.text) || ''\r\n    },\r\n    latexLines() {\r\n      // 保证健壮\r\n      return (this.latexText || '').split('\\n')\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.pdfUrl) {\r\n      this.loadPdf()\r\n    }\r\n  },\r\n  methods: {\r\n    async loadPdf() {\r\n      try {\r\n        this.doc = await pdfjsLib.getDocument(this.pdfUrl).promise\r\n        const numPages = this.doc.numPages\r\n        this.pages = Array.from({ length: numPages }, (_, i) => ({ num: i + 1, highlight: false, charCount: 0 }))\r\n        await this.renderAllPages()\r\n        await this.calcPageCharCounts()\r\n      } catch (e) {\r\n        console.error('加载 PDF 失败：', e)\r\n      }\r\n    },\r\n\r\n    async renderAllPages() {\r\n      // 逐页渲染\r\n      for (const p of this.pages) {\r\n        const page = await this.doc.getPage(p.num)\r\n        const viewport = page.getViewport({ scale: 1.25 })\r\n        const canvas = this.canvasRefs[p.num]\r\n        const ctx = canvas.getContext('2d')\r\n        canvas.width = viewport.width\r\n        canvas.height = viewport.height\r\n        await page.render({ canvasContext: ctx, viewport }).promise\r\n      }\r\n    },\r\n\r\n    async calcPageCharCounts() {\r\n      // 统计每页文字字符数，建立累计数组用于映射\r\n      let total = 0\r\n      const prefix = []\r\n      for (const p of this.pages) {\r\n        const page = await this.doc.getPage(p.num)\r\n        const content = await page.getTextContent({ normalizeWhitespace: true })\r\n        const chars = content.items.map(it => it.str || '').join('').length\r\n        p.charCount = chars\r\n        total += chars\r\n        prefix.push(total)\r\n      }\r\n      this.totalChars = total\r\n      this.cumulativeChars = prefix\r\n    },\r\n\r\n    setPageRef(el) {\r\n      if (!el) return\r\n      // el 结构：div.pdf-page\r\n      const idx = Array.from(el.parentNode.children).indexOf(el) + 1\r\n      this.pageRefs[idx] = el\r\n    },\r\n    setCanvasRef(el, num) {\r\n      if (el) this.canvasRefs[num] = el\r\n    },\r\n\r\n    // 把右侧的行号，近似映射到 PDF 的页号\r\n    lineToPage(lineIndex) {\r\n      if (!this.totalChars || !this.latexLines.length) return 1\r\n      const ratio = Math.min(1, Math.max(0, lineIndex / this.latexLines.length))\r\n      const targetChar = Math.floor(ratio * this.totalChars)\r\n\r\n      // 二分/顺序查找所在页\r\n      let pageNum = 1\r\n      for (let i = 0; i < this.cumulativeChars.length; i++) {\r\n        if (targetChar <= this.cumulativeChars[i]) {\r\n          pageNum = i + 1\r\n          break\r\n        }\r\n      }\r\n      return pageNum\r\n    },\r\n\r\n    onHoverLine(idx) {\r\n      this.hoverIndex = idx\r\n      const pageNum = this.lineToPage(idx)\r\n      const el = this.pageRefs[pageNum]\r\n      if (el && this.$refs.pdfScroll) {\r\n        // 滚动到该页\r\n        const parent = this.$refs.pdfScroll\r\n        parent.scrollTo({\r\n          top: el.offsetTop - 12,\r\n          behavior: 'smooth'\r\n        })\r\n        // 高亮闪烁\r\n        this.flashPage(pageNum)\r\n      }\r\n    },\r\n\r\n    onLeaveLine() {\r\n      this.hoverIndex = -1\r\n    },\r\n\r\n    flashPage(pageNum) {\r\n      const p = this.pages.find(x => x.num === pageNum)\r\n      if (!p) return\r\n      p.highlight = true\r\n      setTimeout(() => { p.highlight = false }, 500)\r\n    },\r\n\r\n    goBack() {\r\n      this.$store.commit('resetState')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.results-page {\r\n  padding: 16px;\r\n}\r\n.two-cols {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 16px;\r\n}\r\n.panel {\r\n  background: #fff;\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  min-height: 420px;\r\n}\r\n.panel-title {\r\n  font-weight: 700;\r\n  margin-bottom: 8px;\r\n}\r\n.empty {\r\n  color: #6b7280;\r\n  padding: 12px;\r\n}\r\n.pdf-scroll {\r\n  height: 70vh;\r\n  overflow: auto;\r\n  background: #f9fafb;\r\n  padding: 8px;\r\n  border-radius: 8px;\r\n}\r\n.pdf-page {\r\n  position: relative;\r\n  margin: 0 auto 12px auto;\r\n  width: fit-content;\r\n  transition: box-shadow .2s ease;\r\n}\r\n.pdf-page.page-highlight {\r\n  box-shadow: 0 0 0 4px rgba(59,130,246,.35); /* 蓝色高亮框 */\r\n}\r\n.latex-block {\r\n  height: 70vh;\r\n  overflow: auto;\r\n  background: #0b1021;\r\n  color: #e6edf3;\r\n  padding: 10px 14px;\r\n  border-radius: 8px;\r\n  line-height: 1.5;\r\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;\r\n  font-size: 14px;\r\n}\r\n.latex-line {\r\n  padding: 2px 6px;\r\n  border-radius: 4px;\r\n  white-space: pre-wrap;\r\n}\r\n.latex-line:hover,\r\n.latex-line.active {\r\n  background: rgba(34,197,94,.18);\r\n}\r\n.toolbar {\r\n  margin-top: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n.back {\r\n  background: #42b983;\r\n  color: #fff;\r\n  border: 0;\r\n  border-radius: 6px;\r\n  padding: 8px 14px;\r\n  cursor: pointer;\r\n}\r\n.hint {\r\n  color: #6b7280;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as pdfjsLib from \"pdfjs-dist\";\nimport * as pdfjsViewer from \"pdfjs-dist/web/pdf_viewer\";\nimport \"pdfjs-dist/web/pdf_viewer.css\";\n\n// worker 设置\nimport pdfjsWorker from \"pdfjs-dist/build/pdf.worker.min?url\";\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\nexport default {\n  name: \"Results\",\n  props: {\n    file: {\n      type: File,\n      required: false\n    },\n    latexOutput: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      pdfUrl: null,\n      // PDF Blob URL\n      pdfDoc: null,\n      pdfViewer: null\n    };\n  },\n  watch: {\n    file: {\n      immediate: true,\n      handler(newFile) {\n        if (newFile) {\n          // 用 URL.createObjectURL 转成 blob 地址\n          this.pdfUrl = URL.createObjectURL(newFile);\n          this.renderPdf();\n        }\n      }\n    }\n  },\n  methods: {\n    async renderPdf() {\n      if (!this.pdfUrl) {\n        console.error(\"pdfUrl 为空，无法渲染 PDF\");\n        return;\n      }\n      try {\n        const container = this.$refs.pdfViewer;\n        container.innerHTML = \"\"; // 清空旧的 PDF\n\n        const eventBus = new pdfjsViewer.EventBus();\n        this.pdfViewer = new pdfjsViewer.PDFViewer({\n          container,\n          eventBus\n        });\n        const loadingTask = pdfjsLib.getDocument(this.pdfUrl);\n        this.pdfDoc = await loadingTask.promise;\n        this.pdfViewer.setDocument(this.pdfDoc);\n        console.log(\"PDF 渲染成功\");\n      } catch (err) {\n        console.error(\"PDF 渲染失败:\", err);\n      }\n    }\n  }\n};","map":{"version":3,"names":["pdfjsLib","pdfjsViewer","pdfjsWorker","GlobalWorkerOptions","workerSrc","name","props","file","type","File","required","latexOutput","String","default","data","pdfUrl","pdfDoc","pdfViewer","watch","immediate","handler","newFile","URL","createObjectURL","renderPdf","methods","console","error","container","$refs","innerHTML","eventBus","EventBus","PDFViewer","loadingTask","getDocument","promise","setDocument","log","err"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results\">\r\n    <div class=\"left-panel\">\r\n      <div v-if=\"pdfUrl\" class=\"pdf-viewer\" ref=\"pdfViewer\"></div>\r\n      <div v-else class=\"placeholder\">请上传 PDF 文件</div>\r\n    </div>\r\n    <div class=\"right-panel\">\r\n      <pre class=\"latex-output\">\r\n{{ latexOutput }}\r\n      </pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\nimport * as pdfjsViewer from \"pdfjs-dist/web/pdf_viewer\";\r\nimport \"pdfjs-dist/web/pdf_viewer.css\";\r\n\r\n// worker 设置\r\nimport pdfjsWorker from \"pdfjs-dist/build/pdf.worker.min?url\";\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\nexport default {\r\n  name: \"Results\",\r\n  props: {\r\n    file: {\r\n      type: File,\r\n      required: false\r\n    },\r\n    latexOutput: {\r\n      type: String,\r\n      default: \"\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      pdfUrl: null, // PDF Blob URL\r\n      pdfDoc: null,\r\n      pdfViewer: null\r\n    };\r\n  },\r\n  watch: {\r\n    file: {\r\n      immediate: true,\r\n      handler(newFile) {\r\n        if (newFile) {\r\n          // 用 URL.createObjectURL 转成 blob 地址\r\n          this.pdfUrl = URL.createObjectURL(newFile);\r\n          this.renderPdf();\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async renderPdf() {\r\n      if (!this.pdfUrl) {\r\n        console.error(\"pdfUrl 为空，无法渲染 PDF\");\r\n        return;\r\n      }\r\n      try {\r\n        const container = this.$refs.pdfViewer;\r\n        container.innerHTML = \"\"; // 清空旧的 PDF\r\n\r\n        const eventBus = new pdfjsViewer.EventBus();\r\n        this.pdfViewer = new pdfjsViewer.PDFViewer({\r\n          container,\r\n          eventBus\r\n        });\r\n\r\n        const loadingTask = pdfjsLib.getDocument(this.pdfUrl);\r\n        this.pdfDoc = await loadingTask.promise;\r\n        this.pdfViewer.setDocument(this.pdfDoc);\r\n\r\n        console.log(\"PDF 渲染成功\");\r\n      } catch (err) {\r\n        console.error(\"PDF 渲染失败:\", err);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.results {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.left-panel {\r\n  flex: 1;\r\n  border-right: 1px solid #ccc;\r\n  overflow: auto;\r\n}\r\n\r\n.right-panel {\r\n  flex: 1;\r\n  padding: 1rem;\r\n  overflow: auto;\r\n}\r\n\r\n.pdf-viewer {\r\n  height: 100%;\r\n}\r\n\r\n.placeholder {\r\n  padding: 2rem;\r\n  text-align: center;\r\n  color: #888;\r\n}\r\n\r\n.latex-output {\r\n  white-space: pre-wrap;\r\n  font-family: monospace;\r\n}\r\n</style>\r\n"],"mappings":"AAeA,OAAO,KAAKA,QAAO,MAAO,YAAY;AACtC,OAAO,KAAKC,WAAU,MAAO,2BAA2B;AACxD,OAAO,+BAA+B;;AAEtC;AACA,OAAOC,WAAU,MAAO,qCAAqC;AAC7DF,QAAQ,CAACG,mBAAmB,CAACC,SAAQ,GAAIF,WAAW;AAEpD,eAAe;EACbG,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,IAAI;MACVC,QAAQ,EAAE;IACZ,CAAC;IACDC,WAAW,EAAE;MACXH,IAAI,EAAEI,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MAAE;MACdC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLX,IAAI,EAAE;MACJY,SAAS,EAAE,IAAI;MACfC,OAAOA,CAACC,OAAO,EAAE;QACf,IAAIA,OAAO,EAAE;UACX;UACA,IAAI,CAACN,MAAK,GAAIO,GAAG,CAACC,eAAe,CAACF,OAAO,CAAC;UAC1C,IAAI,CAACG,SAAS,CAAC,CAAC;QAClB;MACF;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE;QAChBW,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAC;QACnC;MACF;MACA,IAAI;QACF,MAAMC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACZ,SAAS;QACtCW,SAAS,CAACE,SAAQ,GAAI,EAAE,EAAE;;QAE1B,MAAMC,QAAO,GAAI,IAAI9B,WAAW,CAAC+B,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAACf,SAAQ,GAAI,IAAIhB,WAAW,CAACgC,SAAS,CAAC;UACzCL,SAAS;UACTG;QACF,CAAC,CAAC;QAEF,MAAMG,WAAU,GAAIlC,QAAQ,CAACmC,WAAW,CAAC,IAAI,CAACpB,MAAM,CAAC;QACrD,IAAI,CAACC,MAAK,GAAI,MAAMkB,WAAW,CAACE,OAAO;QACvC,IAAI,CAACnB,SAAS,CAACoB,WAAW,CAAC,IAAI,CAACrB,MAAM,CAAC;QAEvCU,OAAO,CAACY,GAAG,CAAC,UAAU,CAAC;MACzB,EAAE,OAAOC,GAAG,EAAE;QACZb,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEY,GAAG,CAAC;MACjC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
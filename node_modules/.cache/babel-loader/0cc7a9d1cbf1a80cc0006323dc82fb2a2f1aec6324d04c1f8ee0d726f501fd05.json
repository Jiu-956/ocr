{"ast":null,"code":"import { createStore } from 'vuex';\nimport api from './services/api';\nexport default createStore({\n  state: {\n    uploadStatus: '',\n    // uploading / success / failed\n    ocrResults: {\n      text: '',\n      pages: [],\n      image: ''\n    },\n    error: null\n  },\n  mutations: {\n    setUploadStatus(state, status) {\n      state.uploadStatus = status;\n    },\n    setOcrResults(state, results) {\n      state.ocrResults = results;\n    },\n    setError(state, error) {\n      state.error = error;\n    },\n    resetState(state) {\n      state.uploadStatus = '';\n      state.ocrResults = {\n        text: '',\n        pages: [],\n        image: ''\n      };\n      state.error = null;\n    }\n  },\n  actions: {\n    async uploadFile({\n      commit\n    }, file) {\n      commit('resetState');\n      commit('setUploadStatus', 'uploading');\n      try {\n        const response = await api.uploadFile(file);\n        let result = {};\n        const rawData = response?.data;\n\n        // üîé ÊâìÂç∞ÂéüÂßãËøîÂõûÔºåÊñπ‰æøÊéíÊü•\n        console.log(\"ÂêéÁ´ØÂéüÂßãËøîÂõû:\", rawData);\n        if (typeof rawData === 'object') {\n          result = rawData;\n        } else if (typeof rawData === 'string') {\n          try {\n            result = JSON.parse(rawData);\n          } catch {\n            result = {\n              text: rawData\n            };\n          }\n        } else {\n          result = {\n            text: String(rawData)\n          };\n        }\n\n        // ‚úÖ Ê†áÂáÜÂåñÔºöÁªü‰∏ÄÂ≠óÊÆµÔºåÈÅøÂÖçÂâçÁ´ØÂ¥©Ê∫É\n        const normalized = {\n          text: result.text || result.content || '',\n          pages: Array.isArray(result.pages) ? result.pages : [],\n          image: result.image || result.image_bytes || ''\n        };\n        console.log(\"Ê†áÂáÜÂåñÂêéÁöÑÁªìÊûú:\", normalized);\n        commit('setOcrResults', normalized);\n        commit('setUploadStatus', 'success');\n      } catch (error) {\n        console.error('Upload failed:', error);\n        let errMsg = 'An error occurred!';\n        if (error.response?.data) {\n          if (typeof error.response.data === 'string') {\n            errMsg = error.response.data;\n          } else if (error.response.data.message) {\n            errMsg = error.response.data.message;\n          }\n        } else if (error.message) {\n          errMsg = error.message;\n        }\n        commit('setError', errMsg);\n        commit('setUploadStatus', 'failed');\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","api","state","uploadStatus","ocrResults","text","pages","image","error","mutations","setUploadStatus","status","setOcrResults","results","setError","resetState","actions","uploadFile","commit","file","response","result","rawData","data","console","log","JSON","parse","String","normalized","content","Array","isArray","image_bytes","errMsg","message"],"sources":["D:/OCR/ocr/src/store.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport api from './services/api'\r\n\r\nexport default createStore({\r\n  state: {\r\n    uploadStatus: '',   // uploading / success / failed\r\n    ocrResults: {\r\n      text: '',\r\n      pages: [],\r\n      image: ''\r\n    },\r\n    error: null\r\n  },\r\n  mutations: {\r\n    setUploadStatus(state, status) {\r\n      state.uploadStatus = status\r\n    },\r\n    setOcrResults(state, results) {\r\n      state.ocrResults = results\r\n    },\r\n    setError(state, error) {\r\n      state.error = error\r\n    },\r\n    resetState(state) {\r\n      state.uploadStatus = ''\r\n      state.ocrResults = { text: '', pages: [], image: '' }\r\n      state.error = null\r\n    }\r\n  },\r\n  actions: {\r\n    async uploadFile({ commit }, file) {\r\n      commit('resetState')\r\n      commit('setUploadStatus', 'uploading')\r\n\r\n      try {\r\n        const response = await api.uploadFile(file)\r\n\r\n        let result = {}\r\n        const rawData = response?.data\r\n\r\n        // üîé ÊâìÂç∞ÂéüÂßãËøîÂõûÔºåÊñπ‰æøÊéíÊü•\r\n        console.log(\"ÂêéÁ´ØÂéüÂßãËøîÂõû:\", rawData)\r\n\r\n        if (typeof rawData === 'object') {\r\n          result = rawData\r\n        } else if (typeof rawData === 'string') {\r\n          try {\r\n            result = JSON.parse(rawData)\r\n          } catch {\r\n            result = { text: rawData }\r\n          }\r\n        } else {\r\n          result = { text: String(rawData) }\r\n        }\r\n\r\n        // ‚úÖ Ê†áÂáÜÂåñÔºöÁªü‰∏ÄÂ≠óÊÆµÔºåÈÅøÂÖçÂâçÁ´ØÂ¥©Ê∫É\r\n        const normalized = {\r\n          text: result.text || result.content || '',\r\n          pages: Array.isArray(result.pages) ? result.pages : [],\r\n          image: result.image || result.image_bytes || ''\r\n        }\r\n\r\n        console.log(\"Ê†áÂáÜÂåñÂêéÁöÑÁªìÊûú:\", normalized)\r\n\r\n        commit('setOcrResults', normalized)\r\n        commit('setUploadStatus', 'success')\r\n      } catch (error) {\r\n        console.error('Upload failed:', error)\r\n\r\n        let errMsg = 'An error occurred!'\r\n        if (error.response?.data) {\r\n          if (typeof error.response.data === 'string') {\r\n            errMsg = error.response.data\r\n          } else if (error.response.data.message) {\r\n            errMsg = error.response.data.message\r\n          }\r\n        } else if (error.message) {\r\n          errMsg = error.message\r\n        }\r\n\r\n        commit('setError', errMsg)\r\n        commit('setUploadStatus', 'failed')\r\n      }\r\n    }\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as pdfjsLib from \"pdfjs-dist\";\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js\";\nexport default {\n  name: \"Result\",\n  data() {\n    return {\n      pdfUrl: \"/output/result.pdf\",\n      // 后端 OCR 输出 PDF 路径\n      pdfDoc: null,\n      pdfPages: [],\n      // 每页 canvas + 对应 boxes\n      latexLines: [],\n      // 模型输出的 LaTeX 按行切分\n      hoveredLine: null\n    };\n  },\n  methods: {\n    async loadPdf() {\n      this.pdfDoc = await pdfjsLib.getDocument(this.pdfUrl).promise;\n      for (let i = 1; i <= this.pdfDoc.numPages; i++) {\n        const page = await this.pdfDoc.getPage(i);\n        const viewport = page.getViewport({\n          scale: 1.5\n        });\n\n        // 创建 canvas 渲染\n        const canvas = this.$refs[\"pdfCanvas\" + (i - 1)][0];\n        const context = canvas.getContext(\"2d\");\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n        const renderContext = {\n          canvasContext: context,\n          viewport: viewport\n        };\n        await page.render(renderContext).promise;\n\n        // TODO: 从后端返回的 OCR 结果里取出对应 box\n        this.pdfPages.push({\n          boxes: [\n          // 示例：模拟每行对应的 box（后端返回时要改成真实数据）\n          {\n            line: 0,\n            top: 50,\n            left: 100,\n            width: 200,\n            height: 20\n          }, {\n            line: 1,\n            top: 100,\n            left: 100,\n            width: 250,\n            height: 20\n          }]\n        });\n      }\n    },\n    async loadLatex() {\n      // 模拟后端返回的 LaTeX 文本\n      const resultLatex = `\n        \\\\documentclass{article}\n        \\\\begin{document}\n        Hello $x^2 + y^2 = z^2$\n        \\\\end{document}\n      `;\n      this.latexLines = resultLatex.trim().split(\"\\n\");\n    }\n  },\n  async mounted() {\n    await this.loadPdf();\n    await this.loadLatex();\n  }\n};","map":{"version":3,"names":["pdfjsLib","GlobalWorkerOptions","workerSrc","name","data","pdfUrl","pdfDoc","pdfPages","latexLines","hoveredLine","methods","loadPdf","getDocument","promise","i","numPages","page","getPage","viewport","getViewport","scale","canvas","$refs","context","getContext","height","width","renderContext","canvasContext","render","push","boxes","line","top","left","loadLatex","resultLatex","trim","split","mounted"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"result-container\">\r\n    <!-- 左侧 PDF 显示 -->\r\n    <div class=\"pdf-view\">\r\n      <div \r\n        v-for=\"(page, pageIndex) in pdfPages\" \r\n        :key=\"pageIndex\"\r\n        class=\"pdf-page\"\r\n      >\r\n        <canvas \r\n          :ref=\"'pdfCanvas' + pageIndex\" \r\n          class=\"pdf-canvas\"\r\n        ></canvas>\r\n\r\n        <!-- 高亮区域 -->\r\n        <div \r\n          v-for=\"(box, idx) in page.boxes\" \r\n          :key=\"idx\"\r\n          class=\"highlight-box\"\r\n          v-show=\"hoveredLine === box.line\"\r\n          :style=\"{\r\n            top: box.top + 'px',\r\n            left: box.left + 'px',\r\n            width: box.width + 'px',\r\n            height: box.height + 'px'\r\n          }\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 右侧 LaTeX 显示 -->\r\n    <div class=\"latex-view\">\r\n      <pre>\r\n        <code>\r\n          <div\r\n            v-for=\"(line, index) in latexLines\"\r\n            :key=\"index\"\r\n            :class=\"{ 'highlight-line': hoveredLine === index }\"\r\n            @mouseenter=\"hoveredLine = index\"\r\n            @mouseleave=\"hoveredLine = null\"\r\n          >\r\n            {{ line }}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc =\r\n  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js\";\r\n\r\nexport default {\r\n  name: \"Result\",\r\n  data() {\r\n    return {\r\n      pdfUrl: \"/output/result.pdf\", // 后端 OCR 输出 PDF 路径\r\n      pdfDoc: null,\r\n      pdfPages: [], // 每页 canvas + 对应 boxes\r\n      latexLines: [], // 模型输出的 LaTeX 按行切分\r\n      hoveredLine: null\r\n    };\r\n  },\r\n  methods: {\r\n    async loadPdf() {\r\n      this.pdfDoc = await pdfjsLib.getDocument(this.pdfUrl).promise;\r\n\r\n      for (let i = 1; i <= this.pdfDoc.numPages; i++) {\r\n        const page = await this.pdfDoc.getPage(i);\r\n        const viewport = page.getViewport({ scale: 1.5 });\r\n\r\n        // 创建 canvas 渲染\r\n        const canvas = this.$refs[\"pdfCanvas\" + (i - 1)][0];\r\n        const context = canvas.getContext(\"2d\");\r\n        canvas.height = viewport.height;\r\n        canvas.width = viewport.width;\r\n\r\n        const renderContext = {\r\n          canvasContext: context,\r\n          viewport: viewport\r\n        };\r\n        await page.render(renderContext).promise;\r\n\r\n        // TODO: 从后端返回的 OCR 结果里取出对应 box\r\n        this.pdfPages.push({\r\n          boxes: [\r\n            // 示例：模拟每行对应的 box（后端返回时要改成真实数据）\r\n            { line: 0, top: 50, left: 100, width: 200, height: 20 },\r\n            { line: 1, top: 100, left: 100, width: 250, height: 20 }\r\n          ]\r\n        });\r\n      }\r\n    },\r\n    async loadLatex() {\r\n      // 模拟后端返回的 LaTeX 文本\r\n      const resultLatex = `\r\n        \\\\documentclass{article}\r\n        \\\\begin{document}\r\n        Hello $x^2 + y^2 = z^2$\r\n        \\\\end{document}\r\n      `;\r\n      this.latexLines = resultLatex.trim().split(\"\\n\");\r\n    }\r\n  },\r\n  async mounted() {\r\n    await this.loadPdf();\r\n    await this.loadLatex();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.result-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 100vh;\r\n}\r\n\r\n.pdf-view {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  background: #f9f9f9;\r\n  position: relative;\r\n}\r\n\r\n.pdf-page {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.pdf-canvas {\r\n  border: 1px solid #ddd;\r\n  box-shadow: 0px 0px 5px #ccc;\r\n}\r\n\r\n.highlight-box {\r\n  position: absolute;\r\n  background: rgba(255, 255, 0, 0.3);\r\n  border: 1px solid orange;\r\n  pointer-events: none;\r\n}\r\n\r\n.latex-view {\r\n  flex: 1;\r\n  background: #1e1e1e;\r\n  color: #f8f8f2;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  font-family: monospace;\r\n}\r\n\r\n.highlight-line {\r\n  background: rgba(255, 255, 0, 0.2);\r\n}\r\n</style>\r\n"],"mappings":";AAkDA,OAAO,KAAKA,QAAO,MAAO,YAAY;AAEtCA,QAAQ,CAACC,mBAAmB,CAACC,SAAQ,GACnC,0EAA0E;AAE5E,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,oBAAoB;MAAE;MAC9BC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE,EAAE;MAAE;MACdC,UAAU,EAAE,EAAE;MAAE;MAChBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,OAAOA,CAAA,EAAG;MACd,IAAI,CAACL,MAAK,GAAI,MAAMN,QAAQ,CAACY,WAAW,CAAC,IAAI,CAACP,MAAM,CAAC,CAACQ,OAAO;MAE7D,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,IAAK,IAAI,CAACR,MAAM,CAACS,QAAQ,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAME,IAAG,GAAI,MAAM,IAAI,CAACV,MAAM,CAACW,OAAO,CAACH,CAAC,CAAC;QACzC,MAAMI,QAAO,GAAIF,IAAI,CAACG,WAAW,CAAC;UAAEC,KAAK,EAAE;QAAI,CAAC,CAAC;;QAEjD;QACA,MAAMC,MAAK,GAAI,IAAI,CAACC,KAAK,CAAC,WAAU,IAAKR,CAAA,GAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,MAAMS,OAAM,GAAIF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;QACvCH,MAAM,CAACI,MAAK,GAAIP,QAAQ,CAACO,MAAM;QAC/BJ,MAAM,CAACK,KAAI,GAAIR,QAAQ,CAACQ,KAAK;QAE7B,MAAMC,aAAY,GAAI;UACpBC,aAAa,EAAEL,OAAO;UACtBL,QAAQ,EAAEA;QACZ,CAAC;QACD,MAAMF,IAAI,CAACa,MAAM,CAACF,aAAa,CAAC,CAACd,OAAO;;QAExC;QACA,IAAI,CAACN,QAAQ,CAACuB,IAAI,CAAC;UACjBC,KAAK,EAAE;UACL;UACA;YAAEC,IAAI,EAAE,CAAC;YAAEC,GAAG,EAAE,EAAE;YAAEC,IAAI,EAAE,GAAG;YAAER,KAAK,EAAE,GAAG;YAAED,MAAM,EAAE;UAAG,CAAC,EACvD;YAAEO,IAAI,EAAE,CAAC;YAAEC,GAAG,EAAE,GAAG;YAAEC,IAAI,EAAE,GAAG;YAAER,KAAK,EAAE,GAAG;YAAED,MAAM,EAAE;UAAG;QAE3D,CAAC,CAAC;MACJ;IACF,CAAC;IACD,MAAMU,SAASA,CAAA,EAAG;MAChB;MACA,MAAMC,WAAU,GAAI;;;;;OAKnB;MACD,IAAI,CAAC5B,UAAS,GAAI4B,WAAW,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;IAClD;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAAC5B,OAAO,CAAC,CAAC;IACpB,MAAM,IAAI,CAACwB,SAAS,CAAC,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
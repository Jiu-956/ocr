{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"pdf-viewer\"\n};\nconst _hoisted_3 = {\n  class: \"latex-viewer\"\n};\nconst _hoisted_4 = [\"onMouseover\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_vue_pdf_embed = _resolveComponent(\"vue-pdf-embed\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_vue_pdf_embed, {\n    ref: \"pdfRef\",\n    source: $data.pdfSource,\n    onRendered: $options.handlePdfRendered,\n    class: \"pdf-embed\"\n  }, null, 8 /* PROPS */, [\"source\", \"onRendered\"])]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.latexLines, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"latex-line\",\n      onMouseover: $event => $options.highlightPdfLine(index),\n      onMouseleave: _cache[0] || (_cache[0] = (...args) => $options.clearHighlight && $options.clearHighlight(...args))\n    }, _toDisplayString(line), 41 /* TEXT, PROPS, NEED_HYDRATION */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_vue_pdf_embed","ref","source","$data","pdfSource","onRendered","$options","handlePdfRendered","_hoisted_3","_Fragment","_renderList","latexLines","line","index","key","onMouseover","$event","highlightPdfLine","onMouseleave","_cache","args","clearHighlight","_hoisted_4"],"sources":["D:\\OCR\\ocr\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"pdf-viewer\">\r\n      <vue-pdf-embed\r\n        ref=\"pdfRef\"\r\n        :source=\"pdfSource\"\r\n        @rendered=\"handlePdfRendered\"\r\n        class=\"pdf-embed\"\r\n      />\r\n    </div>\r\n    <div class=\"latex-viewer\">\r\n      <div\r\n        v-for=\"(line, index) in latexLines\"\r\n        :key=\"index\"\r\n        class=\"latex-line\"\r\n        @mouseover=\"highlightPdfLine(index)\"\r\n        @mouseleave=\"clearHighlight\"\r\n      >\r\n        {{ line }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VuePdfEmbed from 'vue-pdf-embed'\r\nimport { getDocument } from 'pdfjs-dist/build/pdf'\r\n\r\nexport default {\r\n  components: {\r\n    VuePdfEmbed\r\n  },\r\n  data() {\r\n    return {\r\n      pdfSource: '',\r\n      latexLines: [],\r\n      pdfPages: [],\r\n      currentHighlight: null\r\n    }\r\n  },\r\n  methods: {\r\n    async handlePdfRendered() {\r\n      // 这里可以获取PDF渲染完成后的信息\r\n      const pdfDoc = await getDocument(this.pdfSource).promise\r\n      this.pdfPages = Array(pdfDoc.numPages).fill().map((_, i) => i + 1)\r\n    },\r\n    highlightPdfLine(lineIndex) {\r\n      // 清除之前的高亮\r\n      if (this.currentHighlight) {\r\n        this.currentHighlight.style.backgroundColor = ''\r\n      }\r\n      \r\n      // 计算PDF对应位置\r\n      const pdfContainer = this.$refs.pdfRef.$el\r\n      const pdfPage = Math.floor(lineIndex / 10) + 1 // 假设每10行对应一页\r\n      const positionInPage = lineIndex % 10\r\n      \r\n      // 滚动到对应位置\r\n      const pageElement = pdfContainer.querySelector(`.page[data-page-number=\"${pdfPage}\"]`)\r\n      if (pageElement) {\r\n        const textLayer = pageElement.querySelector('.textLayer')\r\n        const textElements = textLayer.querySelectorAll('span')\r\n        \r\n        if (textElements[positionInPage]) {\r\n          textElements[positionInPage].style.backgroundColor = 'yellow'\r\n          this.currentHighlight = textElements[positionInPage]\r\n          pageElement.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n        }\r\n      }\r\n    },\r\n    clearHighlight() {\r\n      if (this.currentHighlight) {\r\n        this.currentHighlight.style.backgroundColor = ''\r\n        this.currentHighlight = null\r\n      }\r\n    },\r\n    async loadPdf(file) {\r\n      this.pdfSource = URL.createObjectURL(file)\r\n      // 这里应该调用Nougat API获取LaTeX结果\r\n      // 模拟数据\r\n      this.latexLines = [\r\n        '\\\\documentclass{article}',\r\n        '\\\\begin{document}',\r\n        'Hello World!',\r\n        '\\\\end{document}'\r\n      ]\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.app-container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.pdf-viewer {\r\n  flex: 1;\r\n  overflow: auto;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.latex-viewer {\r\n  flex: 1;\r\n  overflow: auto;\r\n  padding: 20px;\r\n  font-family: monospace;\r\n}\r\n\r\n.latex-line {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.latex-line:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.pdf-embed {\r\n  width: 100%;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAY;;EAQlBA,KAAK,EAAC;AAAc;;;;uBAT3BC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJC,mBAAA,CAOM,OAPNC,UAOM,GANJC,YAAA,CAKEC,wBAAA;IAJAC,GAAG,EAAC,QAAQ;IACXC,MAAM,EAAEC,KAAA,CAAAC,SAAS;IACjBC,UAAQ,EAAEC,QAAA,CAAAC,iBAAiB;IAC5Bb,KAAK,EAAC;uDAGVG,mBAAA,CAUM,OAVNW,UAUM,I,kBATJb,mBAAA,CAQMc,SAAA,QAAAC,WAAA,CAPoBP,KAAA,CAAAQ,UAAU,GAA1BC,IAAI,EAAEC,KAAK;yBADrBlB,mBAAA,CAQM;MANHmB,GAAG,EAAED,KAAK;MACXnB,KAAK,EAAC,YAAY;MACjBqB,WAAS,EAAAC,MAAA,IAAEV,QAAA,CAAAW,gBAAgB,CAACJ,KAAK;MACjCK,YAAU,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEd,QAAA,CAAAe,cAAA,IAAAf,QAAA,CAAAe,cAAA,IAAAD,IAAA,CAAc;wBAExBR,IAAI,yCAAAU,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
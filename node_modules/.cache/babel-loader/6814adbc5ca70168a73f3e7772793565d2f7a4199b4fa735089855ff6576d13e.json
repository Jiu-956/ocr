{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport * as pdfjsLib from \"pdfjs-dist\";\n\n// 使用CDN worker\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/build/pdf.worker.min.js\";\nexport default {\n  name: \"OcrResults\",\n  setup() {\n    const route = useRoute();\n    const pdfContainer = ref(null);\n    const pdfDoc = ref(null);\n    const activeLineIndex = ref(-1);\n\n    // 从路由参数或localStorage获取数据\n    const ocrResults = computed(() => {\n      // 优先从路由参数获取\n      if (route.params.ocrResults) {\n        return route.params.ocrResults;\n      }\n      // 其次从localStorage获取\n      const storedResults = localStorage.getItem('ocrResults');\n      return storedResults ? JSON.parse(storedResults) : null;\n    });\n\n    // LaTeX按行拆分\n    const latexLines = computed(() => {\n      return ocrResults.value?.text ? ocrResults.value.text.split(\"\\n\").filter(line => line.trim()) : [];\n    });\n\n    // 检查是否有OCR结果\n    const hasOcrResults = computed(() => {\n      return ocrResults.value?.pdfUrl && ocrResults.value?.text;\n    });\n\n    // 渲染PDF\n    const renderPage = async num => {\n      if (!pdfDoc.value) return;\n      try {\n        const page = await pdfDoc.value.getPage(num);\n        const viewport = page.getViewport({\n          scale: 1.5\n        });\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        canvas.width = viewport.width;\n        canvas.height = viewport.height;\n        canvas.className = \"pdf-canvas\";\n        await page.render({\n          canvasContext: context,\n          viewport\n        }).promise;\n        pdfContainer.value.innerHTML = \"\";\n        pdfContainer.value.appendChild(canvas);\n      } catch (err) {\n        console.error(\"PDF渲染失败:\", err);\n      }\n    };\n\n    // 加载PDF\n    onMounted(async () => {\n      if (!hasOcrResults.value) {\n        console.log(\"没有找到OCR结果\");\n        return;\n      }\n      try {\n        const loadingTask = pdfjsLib.getDocument(ocrResults.value.pdfUrl);\n        pdfDoc.value = await loadingTask.promise;\n        await renderPage(1);\n      } catch (err) {\n        console.error(\"PDF加载失败:\", err);\n      }\n    });\n    return {\n      pdfContainer,\n      latexLines,\n      hasOcrResults,\n      activeLineIndex\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","pdfjsLib","GlobalWorkerOptions","workerSrc","name","setup","route","pdfContainer","pdfDoc","activeLineIndex","ocrResults","params","storedResults","localStorage","getItem","JSON","parse","latexLines","value","text","split","filter","line","trim","hasOcrResults","pdfUrl","renderPage","num","page","getPage","viewport","getViewport","scale","canvas","document","createElement","context","getContext","width","height","className","render","canvasContext","promise","innerHTML","appendChild","err","console","error","log","loadingTask","getDocument"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results\">\r\n    <h2>OCR Results</h2>\r\n\r\n    <div class=\"results-container\">\r\n      <!-- 左边 PDF 渲染 -->\r\n      <div ref=\"pdfContainer\" class=\"pdf-viewer\"></div>\r\n\r\n      <!-- 右边 Nougat LaTeX 输出 -->\r\n      <div class=\"latex-viewer\">\r\n        <h3>Nougat LaTeX 输出：</h3>\r\n        <div class=\"latex-lines\">\r\n          <div\r\n            v-for=\"(line, index) in latexLines\"\r\n            :key=\"index\"\r\n            class=\"latex-line\"\r\n            @mouseover=\"scrollPdfTo(index)\"\r\n          >\r\n            {{ line }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from \"vue\";\r\nimport { useRoute } from \"vue-router\";\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\n\r\n// 使用CDN worker\r\npdfjsLib.GlobalWorkerOptions.workerSrc = \r\n  \"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/build/pdf.worker.min.js\";\r\n\r\nexport default {\r\n  name: \"OcrResults\",\r\n  setup() {\r\n    const route = useRoute();\r\n    const pdfContainer = ref(null);\r\n    const pdfDoc = ref(null);\r\n    const activeLineIndex = ref(-1);\r\n\r\n    // 从路由参数或localStorage获取数据\r\n    const ocrResults = computed(() => {\r\n      // 优先从路由参数获取\r\n      if (route.params.ocrResults) {\r\n        return route.params.ocrResults;\r\n      }\r\n      // 其次从localStorage获取\r\n      const storedResults = localStorage.getItem('ocrResults');\r\n      return storedResults ? JSON.parse(storedResults) : null;\r\n    });\r\n\r\n    // LaTeX按行拆分\r\n    const latexLines = computed(() => {\r\n      return ocrResults.value?.text\r\n        ? ocrResults.value.text.split(\"\\n\").filter(line => line.trim())\r\n        : [];\r\n    });\r\n\r\n    // 检查是否有OCR结果\r\n    const hasOcrResults = computed(() => {\r\n      return ocrResults.value?.pdfUrl && ocrResults.value?.text;\r\n    });\r\n\r\n    // 渲染PDF\r\n    const renderPage = async (num) => {\r\n      if (!pdfDoc.value) return;\r\n      try {\r\n        const page = await pdfDoc.value.getPage(num);\r\n        const viewport = page.getViewport({ scale: 1.5 });\r\n\r\n        const canvas = document.createElement(\"canvas\");\r\n        const context = canvas.getContext(\"2d\");\r\n        canvas.width = viewport.width;\r\n        canvas.height = viewport.height;\r\n        canvas.className = \"pdf-canvas\";\r\n\r\n        await page.render({ canvasContext: context, viewport }).promise;\r\n\r\n        pdfContainer.value.innerHTML = \"\";\r\n        pdfContainer.value.appendChild(canvas);\r\n      } catch (err) {\r\n        console.error(\"PDF渲染失败:\", err);\r\n      }\r\n    };\r\n\r\n    // 加载PDF\r\n    onMounted(async () => {\r\n      if (!hasOcrResults.value) {\r\n        console.log(\"没有找到OCR结果\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const loadingTask = pdfjsLib.getDocument(ocrResults.value.pdfUrl);\r\n        pdfDoc.value = await loadingTask.promise;\r\n        await renderPage(1);\r\n      } catch (err) {\r\n        console.error(\"PDF加载失败:\", err);\r\n      }\r\n    });\r\n\r\n    return {\r\n      pdfContainer,\r\n      latexLines,\r\n      hasOcrResults,\r\n      activeLineIndex\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.results-container {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.pdf-viewer {\r\n  flex: 1;\r\n  height: 80vh;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  background: #f9f9f9;\r\n}\r\n\r\n.latex-viewer {\r\n  flex: 1;\r\n  height: 80vh;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  padding: 8px; /* ✅ 缩小 padding */\r\n  font-family: monospace;\r\n  background: #fff;\r\n}\r\n\r\n.latex-lines {\r\n  font-size: 13px;  /* ✅ 字体更小 */\r\n  line-height: 1.4; /* ✅ 行距更紧凑 */\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.latex-line {\r\n  padding: 1px 3px; /* ✅ 缩小缩进 */\r\n  cursor: pointer;\r\n  white-space: pre-wrap; /* ✅ 自动换行 */\r\n}\r\n\r\n.latex-line:hover {\r\n  background: #e0f7fa;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
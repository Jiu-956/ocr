{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"results-page\"\n};\nconst _hoisted_2 = {\n  class: \"two-cols\"\n};\nconst _hoisted_3 = {\n  class: \"panel\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"empty\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"pdf-scroll\",\n  ref: \"pdfScroll\"\n};\nconst _hoisted_6 = {\n  class: \"panel\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"empty\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"latex-block\"\n};\nconst _hoisted_9 = [\"onMouseenter\"];\nconst _hoisted_10 = {\n  class: \"toolbar\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"OCR 结果\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 左：PDF 输入 \"), _createElementVNode(\"div\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    class: \"panel-title\"\n  }, \"📄 PDF 输入\", -1 /* CACHED */)), !$options.pdfUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" 未找到 PDF 预览，请返回重新上传。 \")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pages, p => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: p.num,\n      ref_for: true,\n      ref: $options.setPageRef,\n      class: _normalizeClass([\"pdf-page\", {\n        'page-highlight': p.highlight\n      }])\n    }, [_createElementVNode(\"canvas\", {\n      ref_for: true,\n      ref: el => $options.setCanvasRef(el, p.num)\n    }, null, 512 /* NEED_PATCH */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */))]), _createCommentVNode(\" 右：LaTeX 输出 \"), _createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"div\", {\n    class: \"panel-title\"\n  }, \"🧮 LaTeX 输出\", -1 /* CACHED */)), !$options.latexLines.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, \" 暂无识别输出。 \")) : (_openBlock(), _createElementBlock(\"pre\", _hoisted_8, [_cache[7] || (_cache[7] = _createTextVNode(\"          \")), _createElementVNode(\"code\", null, [_cache[5] || (_cache[5] = _createTextVNode(\"\\n            \")), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.latexLines, (line, idx) => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: idx\n    }, [_cache[3] || (_cache[3] = _createTextVNode(\"\\n              \")), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"latex-line\", {\n        active: $data.hoverIndex === idx\n      }]),\n      onMouseenter: $event => $options.onHoverLine(idx),\n      onMouseleave: _cache[0] || (_cache[0] = (...args) => $options.onLeaveLine && $options.onLeaveLine(...args))\n    }, _toDisplayString(line || ' '), 43 /* TEXT, CLASS, PROPS, NEED_HYDRATION */, _hoisted_9), _cache[4] || (_cache[4] = _createTextVNode(\"\\n            \"))], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */)), _cache[6] || (_cache[6] = _createTextVNode(\"\\n          \"))]), _cache[8] || (_cache[8] = _createTextVNode(\"\\n        \"))]))])]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"button\", {\n    class: \"back\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goBack && $options.goBack(...args))\n  }, \"返回重新处理\"), _cache[10] || (_cache[10] = _createElementVNode(\"span\", {\n    class: \"hint\"\n  }, \"提示：把鼠标移动到右侧任意一行，左侧会滚动到大致对应的 PDF 位置并高亮当前页。\", -1 /* CACHED */))])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","$options","pdfUrl","_hoisted_4","_hoisted_5","_Fragment","_renderList","$data","pages","p","key","num","setPageRef","_normalizeClass","highlight","el","setCanvasRef","_hoisted_6","latexLines","length","_hoisted_7","_hoisted_8","line","idx","active","hoverIndex","onMouseenter","$event","onHoverLine","onMouseleave","_cache","args","onLeaveLine","_hoisted_9","_hoisted_10","onClick","goBack"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results-page\">\r\n    <h2>OCR 结果</h2>\r\n\r\n    <div class=\"two-cols\">\r\n      <!-- 左：PDF 输入 -->\r\n      <div class=\"panel\">\r\n        <div class=\"panel-title\">📄 PDF 输入</div>\r\n\r\n        <div v-if=\"!pdfUrl\" class=\"empty\">\r\n          未找到 PDF 预览，请返回重新上传。\r\n        </div>\r\n\r\n        <div v-else class=\"pdf-scroll\" ref=\"pdfScroll\">\r\n          <div\r\n            v-for=\"p in pages\"\r\n            :key=\"p.num\"\r\n            :ref=\"setPageRef\"\r\n            class=\"pdf-page\"\r\n            :class=\"{ 'page-highlight': p.highlight }\"\r\n          >\r\n            <canvas :ref=\"el => setCanvasRef(el, p.num)\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右：LaTeX 输出 -->\r\n      <div class=\"panel\">\r\n        <div class=\"panel-title\">🧮 LaTeX 输出</div>\r\n\r\n        <div v-if=\"!latexLines.length\" class=\"empty\">\r\n          暂无识别输出。\r\n        </div>\r\n\r\n        <pre v-else class=\"latex-block\">\r\n          <code>\r\n            <template v-for=\"(line, idx) in latexLines\" :key=\"idx\">\r\n              <div\r\n                class=\"latex-line\"\r\n                :class=\"{ active: hoverIndex === idx }\"\r\n                @mouseenter=\"onHoverLine(idx)\"\r\n                @mouseleave=\"onLeaveLine\"\r\n              >{{ line || ' ' }}</div>\r\n            </template>\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"toolbar\">\r\n      <button class=\"back\" @click=\"goBack\">返回重新处理</button>\r\n      <span class=\"hint\">提示：把鼠标移动到右侧任意一行，左侧会滚动到大致对应的 PDF 位置并高亮当前页。</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\n\r\n// pdf.js\r\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf'\r\nimport pdfWorker from 'pdfjs-dist/build/pdf.worker?url'\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker\r\n\r\nexport default {\r\n  name: 'OcrResults',\r\n  data() {\r\n    return {\r\n      doc: null,\r\n      pages: [],                 // [{ num, highlight, charCount }]\r\n      pageRefs: {},              // num -> HTMLElement\r\n      canvasRefs: {},            // num -> HTMLCanvasElement\r\n      totalChars: 0,\r\n      cumulativeChars: [],       // 每页累计字符数（前缀和）\r\n      hoverIndex: -1\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['ocrResults', 'uploadedFileUrl']),\r\n    pdfUrl() {\r\n      // 优先 Vuex；兜底取 sessionStorage\r\n      return this.uploadedFileUrl || sessionStorage.getItem('uploadedFileUrl') || ''\r\n    },\r\n    latexText() {\r\n      return (this.ocrResults && this.ocrResults.text) || ''\r\n    },\r\n    latexLines() {\r\n      // 保证健壮\r\n      return (this.latexText || '').split('\\n')\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.pdfUrl) {\r\n      this.loadPdf()\r\n    }\r\n  },\r\n  methods: {\r\n    async loadPdf() {\r\n      try {\r\n        this.doc = await pdfjsLib.getDocument(this.pdfUrl).promise\r\n        const numPages = this.doc.numPages\r\n        this.pages = Array.from({ length: numPages }, (_, i) => ({ num: i + 1, highlight: false, charCount: 0 }))\r\n        await this.renderAllPages()\r\n        await this.calcPageCharCounts()\r\n      } catch (e) {\r\n        console.error('加载 PDF 失败：', e)\r\n      }\r\n    },\r\n\r\n    async renderAllPages() {\r\n      // 逐页渲染\r\n      for (const p of this.pages) {\r\n        const page = await this.doc.getPage(p.num)\r\n        const viewport = page.getViewport({ scale: 1.25 })\r\n        const canvas = this.canvasRefs[p.num]\r\n        const ctx = canvas.getContext('2d')\r\n        canvas.width = viewport.width\r\n        canvas.height = viewport.height\r\n        await page.render({ canvasContext: ctx, viewport }).promise\r\n      }\r\n    },\r\n\r\n    async calcPageCharCounts() {\r\n      // 统计每页文字字符数，建立累计数组用于映射\r\n      let total = 0\r\n      const prefix = []\r\n      for (const p of this.pages) {\r\n        const page = await this.doc.getPage(p.num)\r\n        const content = await page.getTextContent({ normalizeWhitespace: true })\r\n        const chars = content.items.map(it => it.str || '').join('').length\r\n        p.charCount = chars\r\n        total += chars\r\n        prefix.push(total)\r\n      }\r\n      this.totalChars = total\r\n      this.cumulativeChars = prefix\r\n    },\r\n\r\n    setPageRef(el) {\r\n      if (!el) return\r\n      // el 结构：div.pdf-page\r\n      const idx = Array.from(el.parentNode.children).indexOf(el) + 1\r\n      this.pageRefs[idx] = el\r\n    },\r\n    setCanvasRef(el, num) {\r\n      if (el) this.canvasRefs[num] = el\r\n    },\r\n\r\n    // 把右侧的行号，近似映射到 PDF 的页号\r\n    lineToPage(lineIndex) {\r\n      if (!this.totalChars || !this.latexLines.length) return 1\r\n      const ratio = Math.min(1, Math.max(0, lineIndex / this.latexLines.length))\r\n      const targetChar = Math.floor(ratio * this.totalChars)\r\n\r\n      // 二分/顺序查找所在页\r\n      let pageNum = 1\r\n      for (let i = 0; i < this.cumulativeChars.length; i++) {\r\n        if (targetChar <= this.cumulativeChars[i]) {\r\n          pageNum = i + 1\r\n          break\r\n        }\r\n      }\r\n      return pageNum\r\n    },\r\n\r\n    onHoverLine(idx) {\r\n      this.hoverIndex = idx\r\n      const pageNum = this.lineToPage(idx)\r\n      const el = this.pageRefs[pageNum]\r\n      if (el && this.$refs.pdfScroll) {\r\n        // 滚动到该页\r\n        const parent = this.$refs.pdfScroll\r\n        parent.scrollTo({\r\n          top: el.offsetTop - 12,\r\n          behavior: 'smooth'\r\n        })\r\n        // 高亮闪烁\r\n        this.flashPage(pageNum)\r\n      }\r\n    },\r\n\r\n    onLeaveLine() {\r\n      this.hoverIndex = -1\r\n    },\r\n\r\n    flashPage(pageNum) {\r\n      const p = this.pages.find(x => x.num === pageNum)\r\n      if (!p) return\r\n      p.highlight = true\r\n      setTimeout(() => { p.highlight = false }, 500)\r\n    },\r\n\r\n    goBack() {\r\n      this.$store.commit('resetState')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.results-page {\r\n  padding: 16px;\r\n}\r\n.two-cols {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 16px;\r\n}\r\n.panel {\r\n  background: #fff;\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  min-height: 420px;\r\n}\r\n.panel-title {\r\n  font-weight: 700;\r\n  margin-bottom: 8px;\r\n}\r\n.empty {\r\n  color: #6b7280;\r\n  padding: 12px;\r\n}\r\n.pdf-scroll {\r\n  height: 70vh;\r\n  overflow: auto;\r\n  background: #f9fafb;\r\n  padding: 8px;\r\n  border-radius: 8px;\r\n}\r\n.pdf-page {\r\n  position: relative;\r\n  margin: 0 auto 12px auto;\r\n  width: fit-content;\r\n  transition: box-shadow .2s ease;\r\n}\r\n.pdf-page.page-highlight {\r\n  box-shadow: 0 0 0 4px rgba(59,130,246,.35); /* 蓝色高亮框 */\r\n}\r\n.latex-block {\r\n  height: 70vh;\r\n  overflow: auto;\r\n  background: #0b1021;\r\n  color: #e6edf3;\r\n  padding: 10px 14px;\r\n  border-radius: 8px;\r\n  line-height: 1.5;\r\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;\r\n  font-size: 14px;\r\n}\r\n.latex-line {\r\n  padding: 2px 6px;\r\n  border-radius: 4px;\r\n  white-space: pre-wrap;\r\n}\r\n.latex-line:hover,\r\n.latex-line.active {\r\n  background: rgba(34,197,94,.18);\r\n}\r\n.toolbar {\r\n  margin-top: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n.back {\r\n  background: #42b983;\r\n  color: #fff;\r\n  border: 0;\r\n  border-radius: 6px;\r\n  padding: 8px 14px;\r\n  cursor: pointer;\r\n}\r\n.hint {\r\n  color: #6b7280;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAGlBA,KAAK,EAAC;AAAU;;EAEdA,KAAK,EAAC;AAAO;;;EAGIA,KAAK,EAAC;;;;EAIdA,KAAK,EAAC,YAAY;EAACC,GAAG,EAAC;;;EAchCD,KAAK,EAAC;AAAO;;;EAGeA,KAAK,EAAC;;;;EAIzBA,KAAK,EAAC;;;;EAejBA,KAAK,EAAC;AAAS;;uBAhDtBE,mBAAA,CAoDM,OApDNC,UAoDM,G,4BAnDJC,mBAAA,CAAe,YAAX,QAAM,qBAEVA,mBAAA,CA2CM,OA3CNC,UA2CM,GA1CJC,mBAAA,cAAiB,EACjBF,mBAAA,CAkBM,OAlBNG,UAkBM,G,0BAjBJH,mBAAA,CAAwC;IAAnCJ,KAAK,EAAC;EAAa,GAAC,WAAS,qB,CAEtBQ,QAAA,CAAAC,MAAM,I,cAAlBP,mBAAA,CAEM,OAFNQ,UAEM,EAF4B,uBAElC,M,cAEAR,mBAAA,CAUM,OAVNS,UAUM,I,kBATJT,mBAAA,CAQMU,SAAA,QAAAC,WAAA,CAPQC,KAAA,CAAAC,KAAK,EAAVC,CAAC;yBADVd,mBAAA,CAQM;MANHe,GAAG,EAAED,CAAC,CAACE,GAAG;;MACVjB,GAAG,EAAEO,QAAA,CAAAW,UAAU;MAChBnB,KAAK,EAAAoB,eAAA,EAAC,UAAU;QAAA,kBACYJ,CAAC,CAACK;MAAS;QAEvCjB,mBAAA,CAAsD;;MAA7CH,GAAG,EAAEqB,EAAE,IAAId,QAAA,CAAAe,YAAY,CAACD,EAAE,EAAEN,CAAC,CAACE,GAAG;;6DAKhDZ,mBAAA,gBAAmB,EACnBF,mBAAA,CAmBM,OAnBNoB,UAmBM,G,0BAlBJpB,mBAAA,CAA0C;IAArCJ,KAAK,EAAC;EAAa,GAAC,aAAW,qB,CAExBQ,QAAA,CAAAiB,UAAU,CAACC,MAAM,I,cAA7BxB,mBAAA,CAEM,OAFNyB,UAEM,EAFuC,WAE7C,M,cAEAzB,mBAAA,CAWM,OAXN0B,UAWM,G,2CAX0B,YAC9B,IAAAxB,mBAAA,CASO,e,2CATD,gBACJ,K,kBAAAF,mBAAA,CAOWU,SAAA,QAAAC,WAAA,CAPqBL,QAAA,CAAAiB,UAAU,GAAxBI,IAAI,EAAEC,GAAG;;WAAuBA;IAAG,I,2CAAE,kBACrD,IAAA1B,mBAAA,CAKwB;MAJtBJ,KAAK,EAAAoB,eAAA,EAAC,YAAY;QAAAW,MAAA,EACAjB,KAAA,CAAAkB,UAAU,KAAKF;MAAG;MACnCG,YAAU,EAAAC,MAAA,IAAE1B,QAAA,CAAA2B,WAAW,CAACL,GAAG;MAC3BM,YAAU,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE9B,QAAA,CAAA+B,WAAA,IAAA/B,QAAA,CAAA+B,WAAA,IAAAD,IAAA,CAAW;wBACtBT,IAAI,uDAAAW,UAAA,G,2CAAgB,gBAC1B,G;6EAAW,cACb,G,8CAAO,YACT,G,QAIJpC,mBAAA,CAGM,OAHNqC,WAGM,GAFJrC,mBAAA,CAAoD;IAA5CJ,KAAK,EAAC,MAAM;IAAE0C,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE9B,QAAA,CAAAmC,MAAA,IAAAnC,QAAA,CAAAmC,MAAA,IAAAL,IAAA,CAAM;KAAE,QAAM,G,4BAC3ClC,mBAAA,CAAmE;IAA7DJ,KAAK,EAAC;EAAM,GAAC,2CAAyC,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createStore } from 'vuex';\nimport api from './services/api';\nexport default createStore({\n  state: {\n    uploadStatus: '',\n    // uploading / success / failed\n    ocrResults: null,\n    // { text: string, ... }\n    error: null,\n    uploadedFileUrl: null // ObjectURL，用于 pdf 预览\n  },\n  mutations: {\n    setUploadStatus(state, status) {\n      state.uploadStatus = status;\n    },\n    setOcrResults(state, results) {\n      state.ocrResults = results;\n    },\n    setError(state, error) {\n      state.error = error;\n    },\n    setUploadedFileUrl(state, url) {\n      state.uploadedFileUrl = url;\n    },\n    resetState(state) {\n      // 释放旧的 ObjectURL\n      if (state.uploadedFileUrl) {\n        try {\n          URL.revokeObjectURL(state.uploadedFileUrl);\n        } catch (err) {\n          console.warn('Failed to revoke object URL:', err);\n        }\n      }\n      state.uploadStatus = '';\n      state.ocrResults = null;\n      state.error = null;\n      state.uploadedFileUrl = null;\n      // 清理 sessionStorage 兜底\n      sessionStorage.removeItem('uploadedFileUrl');\n    }\n  },\n  actions: {\n    // 上传文件并调用后端 OCR\n    async uploadFile({\n      commit\n    }, file) {\n      commit('resetState');\n      commit('setUploadStatus', 'uploading');\n      try {\n        // 生成 ObjectURL，用于 PDF 预览\n        const url = URL.createObjectURL(file);\n        commit('setUploadedFileUrl', url);\n        sessionStorage.setItem('uploadedFileUrl', url);\n\n        // 调用后端 API\n        const response = await api.uploadFile(file);\n\n        // 兼容字符串 / JSON\n        let data = response?.data;\n        if (typeof data === 'string') {\n          try {\n            data = JSON.parse(data);\n          } catch {\n            data = {\n              text: data\n            }; // 纯文本情况\n          }\n        }\n\n        // 统一写入 ocrResults\n        const text = data?.text || data?.content || '';\n        commit('setOcrResults', {\n          text\n        });\n        commit('setUploadStatus', 'success');\n      } catch (error) {\n        console.error('Upload failed:', error);\n        let errMsg = 'An error occurred!';\n        if (error.response?.data) {\n          errMsg = typeof error.response.data === 'string' ? error.response.data : error.response.data.message || errMsg;\n        } else if (error.message) {\n          errMsg = error.message;\n        }\n        commit('setError', errMsg);\n        commit('setUploadStatus', 'failed');\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","api","state","uploadStatus","ocrResults","error","uploadedFileUrl","mutations","setUploadStatus","status","setOcrResults","results","setError","setUploadedFileUrl","url","resetState","URL","revokeObjectURL","err","console","warn","sessionStorage","removeItem","actions","uploadFile","commit","file","createObjectURL","setItem","response","data","JSON","parse","text","content","errMsg","message"],"sources":["D:/OCR/ocr/src/store.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport api from './services/api'\r\n\r\nexport default createStore({\r\n  state: {\r\n    uploadStatus: '',              // uploading / success / failed\r\n    ocrResults: null,              // { text: string, ... }\r\n    error: null,\r\n    uploadedFileUrl: null          // ObjectURL，用于 pdf 预览\r\n  },\r\n\r\n  mutations: {\r\n    setUploadStatus(state, status) {\r\n      state.uploadStatus = status\r\n    },\r\n    setOcrResults(state, results) {\r\n      state.ocrResults = results\r\n    },\r\n    setError(state, error) {\r\n      state.error = error\r\n    },\r\n    setUploadedFileUrl(state, url) {\r\n      state.uploadedFileUrl = url\r\n    },\r\n    resetState(state) {\r\n      // 释放旧的 ObjectURL\r\n      if (state.uploadedFileUrl) {\r\n        try {\r\n          URL.revokeObjectURL(state.uploadedFileUrl)\r\n        } catch (err) {\r\n          console.warn('Failed to revoke object URL:', err)\r\n        }\r\n      }\r\n      state.uploadStatus = ''\r\n      state.ocrResults = null\r\n      state.error = null\r\n      state.uploadedFileUrl = null\r\n      // 清理 sessionStorage 兜底\r\n      sessionStorage.removeItem('uploadedFileUrl')\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 上传文件并调用后端 OCR\r\n    async uploadFile({ commit }, file) {\r\n      commit('resetState')\r\n      commit('setUploadStatus', 'uploading')\r\n\r\n      try {\r\n        // 生成 ObjectURL，用于 PDF 预览\r\n        const url = URL.createObjectURL(file)\r\n        commit('setUploadedFileUrl', url)\r\n        sessionStorage.setItem('uploadedFileUrl', url)\r\n\r\n        // 调用后端 API\r\n        const response = await api.uploadFile(file)\r\n\r\n        // 兼容字符串 / JSON\r\n        let data = response?.data\r\n        if (typeof data === 'string') {\r\n          try {\r\n            data = JSON.parse(data)\r\n          } catch {\r\n            data = { text: data } // 纯文本情况\r\n          }\r\n        }\r\n\r\n        // 统一写入 ocrResults\r\n        const text = data?.text || data?.content || ''\r\n        commit('setOcrResults', { text })\r\n\r\n        commit('setUploadStatus', 'success')\r\n      } catch (error) {\r\n        console.error('Upload failed:', error)\r\n        let errMsg = 'An error occurred!'\r\n        if (error.response?.data) {\r\n          errMsg = typeof error.response.data === 'string'\r\n            ? error.response.data\r\n            : (error.response.data.message || errMsg)\r\n        } else if (error.message) {\r\n          errMsg = error.message\r\n        }\r\n        commit('setError', errMsg)\r\n        commit('setUploadStatus', 'failed')\r\n      }\r\n    }\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
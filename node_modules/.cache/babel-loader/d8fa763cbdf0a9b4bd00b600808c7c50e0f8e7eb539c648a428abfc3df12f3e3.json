{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"results\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"results-container\"\n};\nconst _hoisted_3 = {\n  class: \"split\"\n};\nconst _hoisted_4 = {\n  class: \"pdf-pane\",\n  ref: \"pdfPane\"\n};\nconst _hoisted_5 = {\n  class: \"latex-pane\",\n  ref: \"latexPane\"\n};\nconst _hoisted_6 = [\"onMouseenter\", \"innerHTML\"];\nconst _hoisted_7 = {\n  key: 1,\n  class: \"no-results\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"OCR Results\", -1 /* CACHED */)), $options.hasData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" 左：PDF 渲染（每页一个 canvas） \"), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pageViews, (page, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: i,\n      class: _normalizeClass([\"pdf-page\", {\n        active: i === $data.activePageIndex\n      }]),\n      ref_for: true,\n      ref: el => $data.pageRefs[i] = el\n    }, [_createElementVNode(\"canvas\", {\n      ref_for: true,\n      ref: el => $data.canvasRefs[i] = el\n    }, null, 512 /* NEED_PATCH */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createCommentVNode(\" 右：LaTeX 行列表（MathJax 渲染） \"), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.latexLines, (line, idx) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: idx,\n      class: \"latex-line\",\n      onMouseenter: $event => $options.highlightLine(idx),\n      onMouseleave: _cache[0] || (_cache[0] = (...args) => $options.clearHighlight && $options.clearHighlight(...args)),\n      innerHTML: line\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _cache[2] || (_cache[2] = [_createElementVNode(\"p\", null, [_createTextVNode(\"暂无可渲染的数据。请先上传 PDF 并确保 Vuex 的 ocrResults 中有 \"), _createElementVNode(\"code\", null, \"file\"), _createTextVNode(\"（File 对象）和 \"), _createElementVNode(\"code\", null, \"latex\"), _createTextVNode(\"（数组或文本）。\")], -1 /* CACHED */)]))), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goBack && $options.goBack(...args)),\n    class: \"back-button\"\n  }, \"Process Another File\")]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","$options","hasData","_hoisted_2","_hoisted_3","_createCommentVNode","_hoisted_4","_Fragment","_renderList","$data","pageViews","page","i","key","_normalizeClass","active","activePageIndex","el","pageRefs","canvasRefs","_hoisted_5","latexLines","line","idx","onMouseenter","$event","highlightLine","onMouseleave","_cache","args","clearHighlight","innerHTML","_hoisted_7","onClick","goBack"],"sources":["D:\\OCR\\ocr\\src\\views\\OcrResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"results\">\r\n    <h2>OCR Results</h2>\r\n\r\n    <div v-if=\"hasData\" class=\"results-container\">\r\n      <div class=\"split\">\r\n        <!-- 左：PDF 渲染（每页一个 canvas） -->\r\n        <div class=\"pdf-pane\" ref=\"pdfPane\">\r\n          <div\r\n            v-for=\"(page, i) in pageViews\"\r\n            :key=\"i\"\r\n            class=\"pdf-page\"\r\n            :class=\"{ active: i === activePageIndex }\"\r\n            :ref=\"el => pageRefs[i] = el\"\r\n          >\r\n            <canvas :ref=\"el => canvasRefs[i] = el\"></canvas>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 右：LaTeX 行列表（MathJax 渲染） -->\r\n        <div class=\"latex-pane\" ref=\"latexPane\">\r\n          <div\r\n            v-for=\"(line, idx) in latexLines\"\r\n            :key=\"idx\"\r\n            class=\"latex-line\"\r\n            @mouseenter=\"highlightLine(idx)\"\r\n            @mouseleave=\"clearHighlight\"\r\n            v-html=\"line\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"no-results\">\r\n      <p>暂无可渲染的数据。请先上传 PDF 并确保 Vuex 的 ocrResults 中有 <code>file</code>（File 对象）和 <code>latex</code>（数组或文本）。</p>\r\n    </div>\r\n\r\n    <button @click=\"goBack\" class=\"back-button\">Process Another File</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\nimport * as pdfjsLib from 'pdfjs-dist'\r\n\r\nexport default {\r\n  name: 'OcrResults',\r\n  computed: {\r\n    ...mapState(['ocrResults']),\r\n    hasData() {\r\n      // 需要：ocrResults.file 为 File；latex 为数组或文本\r\n      return !!(this.ocrResults && this.ocrResults.file && (this.ocrResults.latex || this.ocrResults.text))\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      pdfDoc: null,\r\n      pageViews: [],              // { pageNumber, viewport } 列表\r\n      canvasRefs: [],             // canvas DOM refs\r\n      pageRefs: [],               // 每页容器 DOM refs\r\n      activePageIndex: -1,        // 当前高亮页\r\n      latexLines: [],             // 渲染到右侧的 HTML 行\r\n      lineToPageMap: []           // 行 -> 页索引 的映射\r\n    }\r\n  },\r\n  async mounted() {\r\n    if (!this.hasData) return\r\n\r\n    // 1) 载入 PDF（不使用 pdf_viewer.css；禁用 worker 规避打包问题）\r\n    await this.loadPDF(this.ocrResults.file)\r\n\r\n    // 2) 准备 LaTeX 行（优先使用 ocrResults.latex；否则从 text 按行拆分）\r\n    const rawLatex = Array.isArray(this.ocrResults.latex)\r\n      ? this.ocrResults.latex\r\n      : (typeof this.ocrResults.latex === 'string'\r\n          ? this.ocrResults.latex.split('\\n')\r\n          : (this.ocrResults.text ? String(this.ocrResults.text).split('\\n') : []))\r\n\r\n    await this.loadLatex(rawLatex)\r\n\r\n    // 3) 准备行->页映射（如果后端给了 mapping 就用，没有则用等分近似）\r\n    this.buildLineToPageMap(rawLatex.length)\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.$store.commit('resetState')\r\n      this.$router.push('/')\r\n    },\r\n\r\n    // 加载并渲染整份 PDF（逐页画到 canvas）\r\n    async loadPDF(file) {\r\n      try {\r\n        const buffer = await file.arrayBuffer()\r\n        const loadingTask = pdfjsLib.getDocument({\r\n          data: buffer,\r\n          disableWorker: true // 🚫 不使用 worker，避免额外打包配置\r\n        })\r\n        this.pdfDoc = await loadingTask.promise\r\n\r\n        this.pageViews = Array.from({ length: this.pdfDoc.numPages }, (_, i) => ({\r\n          pageNumber: i + 1,\r\n          viewport: null\r\n        }))\r\n\r\n        // 顺序渲染每一页\r\n        for (let i = 0; i < this.pageViews.length; i++) {\r\n          await this.renderPage(i)\r\n        }\r\n      } catch (err) {\r\n        console.error('加载/渲染 PDF 出错：', err)\r\n      }\r\n    },\r\n\r\n    async renderPage(index) {\r\n      const pageNumber = index + 1\r\n      const page = await this.pdfDoc.getPage(pageNumber)\r\n      const viewport = page.getViewport({ scale: 1.5 })\r\n      this.pageViews[index].viewport = viewport\r\n\r\n      const canvas = this.canvasRefs[index]\r\n      const ctx = canvas.getContext('2d')\r\n      canvas.width = Math.ceil(viewport.width)\r\n      canvas.height = Math.ceil(viewport.height)\r\n\r\n      await page.render({ canvasContext: ctx, viewport }).promise\r\n    },\r\n\r\n    // 用 MathJax 渲染 LaTeX 行；如果没加载 MathJax，则退化为原文\r\n    async loadLatex(lines) {\r\n      const mj = window.MathJax\r\n      if (!mj || !mj.tex2chtml) {\r\n        // 退化：不渲染，直接显示原文本\r\n        this.latexLines = lines.map(l => this.escapeHtml(l)).map(html => `<pre class=\"plain\">${html}</pre>`)\r\n        return\r\n      }\r\n      this.latexLines = lines.map(line => mj.tex2chtml(line).outerHTML)\r\n      // 让 MathJax 遍历 typeset（防止初次插入不布局）\r\n      await mj.typesetPromise?.()\r\n    },\r\n\r\n    // 行 -> 页 映射\r\n    buildLineToPageMap(totalLines) {\r\n      // 如果你的后端能返回精确映射（例如：每行带 pageIndex），可以放到 ocrResults.linePageMap\r\n      if (Array.isArray(this.ocrResults.linePageMap) && this.ocrResults.linePageMap.length === totalLines) {\r\n        this.lineToPageMap = this.ocrResults.linePageMap\r\n        return\r\n      }\r\n\r\n      // 没有映射就均匀等分：把行按页平均分配（页级定位）\r\n      const pages = this.pageViews.length || 1\r\n      this.lineToPageMap = Array.from({ length: totalLines }, (_, i) => {\r\n        const pageIdx = Math.min(pages - 1, Math.floor(i * pages / Math.max(1, totalLines)))\r\n        return pageIdx\r\n      })\r\n    },\r\n\r\n    // 悬停联动：滚动到对应页并高亮页框\r\n    highlightLine(lineIndex) {\r\n      const pageIdx = this.lineToPageMap[lineIndex] ?? 0\r\n      const pageEl = this.pageRefs[pageIdx]\r\n      if (!pageEl) return\r\n\r\n      // 滚动到该页（居中）\r\n      pageEl.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n\r\n      // 高亮该页\r\n      this.activePageIndex = pageIdx\r\n    },\r\n\r\n    clearHighlight() {\r\n      this.activePageIndex = -1\r\n    },\r\n\r\n    escapeHtml(s) {\r\n      return String(s)\r\n        .replaceAll('&', '&amp;')\r\n        .replaceAll('<', '&lt;')\r\n        .replaceAll('>', '&gt;')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.results {\r\n  padding: 1rem;\r\n}\r\n\r\n.results-container {\r\n  margin-top: 1rem;\r\n}\r\n\r\n/* 两栏布局 */\r\n.split {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 12px;\r\n  height: 80vh;\r\n}\r\n\r\n/* 左侧 PDF */\r\n.pdf-pane {\r\n  overflow: auto;\r\n  background: #f5f7fa;\r\n  padding: 8px;\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 8px;\r\n}\r\n\r\n.pdf-page {\r\n  margin: 8px auto;\r\n  padding: 4px;\r\n  border: 2px solid transparent;\r\n  border-radius: 6px;\r\n  width: max-content;\r\n  max-width: 100%;\r\n}\r\n\r\n.pdf-page.active {\r\n  border-color: #ef4444; /* 悬停对应页高亮红框 */\r\n  box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.15);\r\n}\r\n\r\n/* 右侧 LaTeX 区 */\r\n.latex-pane {\r\n  overflow: auto;\r\n  padding: 8px 12px;\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 8px;\r\n  background: #fff;\r\n}\r\n\r\n.latex-line {\r\n  padding: 6px 8px;\r\n  border-radius: 6px;\r\n  cursor: default;\r\n}\r\n\r\n.latex-line:hover {\r\n  background: #fff7cc;\r\n}\r\n\r\n/* 纯文本降级样式 */\r\npre.plain {\r\n  margin: 0;\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 其它 */\r\n.no-results {\r\n  margin: 2rem 0;\r\n  color: #666;\r\n  text-align: center;\r\n}\r\n\r\n.back-button {\r\n  margin-top: 1.25rem;\r\n  background-color: #42b983;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.75rem 1.25rem;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n}\r\n.back-button:hover { background-color: #3aa876; }\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;;EAGEA,KAAK,EAAC;;;EACnBA,KAAK,EAAC;AAAO;;EAEXA,KAAK,EAAC,UAAU;EAACC,GAAG,EAAC;;;EAarBD,KAAK,EAAC,YAAY;EAACC,GAAG,EAAC;;;;;EAapBD,KAAK,EAAC;;;uBAhCpBE,mBAAA,CAqCM,OArCNC,UAqCM,G,0BApCJC,mBAAA,CAAoB,YAAhB,aAAW,qBAEJC,QAAA,CAAAC,OAAO,I,cAAlBJ,mBAAA,CA2BM,OA3BNK,UA2BM,GA1BJH,mBAAA,CAyBM,OAzBNI,UAyBM,GAxBJC,mBAAA,2BAA8B,EAC9BL,mBAAA,CAUM,OAVNM,UAUM,I,kBATJR,mBAAA,CAQMS,SAAA,QAAAC,WAAA,CAPgBC,KAAA,CAAAC,SAAS,GAArBC,IAAI,EAAEC,CAAC;yBADjBd,mBAAA,CAQM;MANHe,GAAG,EAAED,CAAC;MACPhB,KAAK,EAAAkB,eAAA,EAAC,UAAU;QAAAC,MAAA,EACEH,CAAC,KAAKH,KAAA,CAAAO;MAAe;;MACtCnB,GAAG,EAAEoB,EAAE,IAAIR,KAAA,CAAAS,QAAQ,CAACN,CAAC,IAAIK;QAE1BjB,mBAAA,CAAiD;;MAAxCH,GAAG,EAAEoB,EAAE,IAAIR,KAAA,CAAAU,UAAU,CAACP,CAAC,IAAIK;;0DAIxCZ,mBAAA,6BAAgC,EAChCL,mBAAA,CASM,OATNoB,UASM,I,kBARJtB,mBAAA,CAOES,SAAA,QAAAC,WAAA,CANsBC,KAAA,CAAAY,UAAU,GAAxBC,IAAI,EAAEC,GAAG;yBADnBzB,mBAAA,CAOE;MALCe,GAAG,EAAEU,GAAG;MACT3B,KAAK,EAAC,YAAY;MACjB4B,YAAU,EAAAC,MAAA,IAAExB,QAAA,CAAAyB,aAAa,CAACH,GAAG;MAC7BI,YAAU,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE5B,QAAA,CAAA6B,cAAA,IAAA7B,QAAA,CAAA6B,cAAA,IAAAD,IAAA,CAAc;MAC3BE,SAAa,EAALT;;+EAMhBxB,mBAAA,CAEM,OAFNkC,UAEM,EAAAJ,MAAA,QAAAA,MAAA,OADJ5B,mBAAA,CAAwG,Y,iBAArG,6CAA2C,GAAAA,mBAAA,CAAiB,cAAX,MAAI,G,iBAAO,aAAW,GAAAA,mBAAA,CAAkB,cAAZ,OAAK,G,iBAAO,UAAQ,E,wBAGtGA,mBAAA,CAAyE;IAAhEiC,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE5B,QAAA,CAAAiC,MAAA,IAAAjC,QAAA,CAAAiC,MAAA,IAAAL,IAAA,CAAM;IAAEjC,KAAK,EAAC;KAAc,sBAAoB,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
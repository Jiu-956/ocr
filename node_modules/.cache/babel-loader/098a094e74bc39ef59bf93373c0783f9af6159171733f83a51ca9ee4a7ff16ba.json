{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport VuePdfEmbed from 'vue-pdf-embed';\nimport { getDocument } from 'pdfjs-dist/build/pdf';\nexport default {\n  components: {\n    VuePdfEmbed\n  },\n  data() {\n    return {\n      pdfSource: '',\n      latexLines: [],\n      pdfPages: [],\n      currentHighlight: null\n    };\n  },\n  methods: {\n    async handlePdfRendered() {\n      // 这里可以获取PDF渲染完成后的信息\n      const pdfDoc = await getDocument(this.pdfSource).promise;\n      this.pdfPages = Array(pdfDoc.numPages).fill().map((_, i) => i + 1);\n    },\n    highlightPdfLine(lineIndex) {\n      // 清除之前的高亮\n      if (this.currentHighlight) {\n        this.currentHighlight.style.backgroundColor = '';\n      }\n\n      // 计算PDF对应位置\n      const pdfContainer = this.$refs.pdfRef.$el;\n      const pdfPage = Math.floor(lineIndex / 10) + 1; // 假设每10行对应一页\n      const positionInPage = lineIndex % 10;\n\n      // 滚动到对应位置\n      const pageElement = pdfContainer.querySelector(`.page[data-page-number=\"${pdfPage}\"]`);\n      if (pageElement) {\n        const textLayer = pageElement.querySelector('.textLayer');\n        const textElements = textLayer.querySelectorAll('span');\n        if (textElements[positionInPage]) {\n          textElements[positionInPage].style.backgroundColor = 'yellow';\n          this.currentHighlight = textElements[positionInPage];\n          pageElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n        }\n      }\n    },\n    clearHighlight() {\n      if (this.currentHighlight) {\n        this.currentHighlight.style.backgroundColor = '';\n        this.currentHighlight = null;\n      }\n    },\n    async loadPdf(file) {\n      this.pdfSource = URL.createObjectURL(file);\n      // 这里应该调用Nougat API获取LaTeX结果\n      // 模拟数据\n      this.latexLines = ['\\\\documentclass{article}', '\\\\begin{document}', 'Hello World!', '\\\\end{document}'];\n    }\n  }\n};","map":{"version":3,"names":["VuePdfEmbed","getDocument","components","data","pdfSource","latexLines","pdfPages","currentHighlight","methods","handlePdfRendered","pdfDoc","promise","Array","numPages","fill","map","_","i","highlightPdfLine","lineIndex","style","backgroundColor","pdfContainer","$refs","pdfRef","$el","pdfPage","Math","floor","positionInPage","pageElement","querySelector","textLayer","textElements","querySelectorAll","scrollIntoView","behavior","block","clearHighlight","loadPdf","file","URL","createObjectURL"],"sources":["D:\\OCR\\ocr\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"pdf-viewer\">\r\n      <vue-pdf-embed\r\n        ref=\"pdfRef\"\r\n        :source=\"pdfSource\"\r\n        @rendered=\"handlePdfRendered\"\r\n        class=\"pdf-embed\"\r\n      />\r\n    </div>\r\n    <div class=\"latex-viewer\">\r\n      <div\r\n        v-for=\"(line, index) in latexLines\"\r\n        :key=\"index\"\r\n        class=\"latex-line\"\r\n        @mouseover=\"highlightPdfLine(index)\"\r\n        @mouseleave=\"clearHighlight\"\r\n      >\r\n        {{ line }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VuePdfEmbed from 'vue-pdf-embed'\r\nimport { getDocument } from 'pdfjs-dist/build/pdf'\r\n\r\nexport default {\r\n  components: {\r\n    VuePdfEmbed\r\n  },\r\n  data() {\r\n    return {\r\n      pdfSource: '',\r\n      latexLines: [],\r\n      pdfPages: [],\r\n      currentHighlight: null\r\n    }\r\n  },\r\n  methods: {\r\n    async handlePdfRendered() {\r\n      // 这里可以获取PDF渲染完成后的信息\r\n      const pdfDoc = await getDocument(this.pdfSource).promise\r\n      this.pdfPages = Array(pdfDoc.numPages).fill().map((_, i) => i + 1)\r\n    },\r\n    highlightPdfLine(lineIndex) {\r\n      // 清除之前的高亮\r\n      if (this.currentHighlight) {\r\n        this.currentHighlight.style.backgroundColor = ''\r\n      }\r\n      \r\n      // 计算PDF对应位置\r\n      const pdfContainer = this.$refs.pdfRef.$el\r\n      const pdfPage = Math.floor(lineIndex / 10) + 1 // 假设每10行对应一页\r\n      const positionInPage = lineIndex % 10\r\n      \r\n      // 滚动到对应位置\r\n      const pageElement = pdfContainer.querySelector(`.page[data-page-number=\"${pdfPage}\"]`)\r\n      if (pageElement) {\r\n        const textLayer = pageElement.querySelector('.textLayer')\r\n        const textElements = textLayer.querySelectorAll('span')\r\n        \r\n        if (textElements[positionInPage]) {\r\n          textElements[positionInPage].style.backgroundColor = 'yellow'\r\n          this.currentHighlight = textElements[positionInPage]\r\n          pageElement.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n        }\r\n      }\r\n    },\r\n    clearHighlight() {\r\n      if (this.currentHighlight) {\r\n        this.currentHighlight.style.backgroundColor = ''\r\n        this.currentHighlight = null\r\n      }\r\n    },\r\n    async loadPdf(file) {\r\n      this.pdfSource = URL.createObjectURL(file)\r\n      // 这里应该调用Nougat API获取LaTeX结果\r\n      // 模拟数据\r\n      this.latexLines = [\r\n        '\\\\documentclass{article}',\r\n        '\\\\begin{document}',\r\n        'Hello World!',\r\n        '\\\\end{document}'\r\n      ]\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.app-container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.pdf-viewer {\r\n  flex: 1;\r\n  overflow: auto;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.latex-viewer {\r\n  flex: 1;\r\n  overflow: auto;\r\n  padding: 20px;\r\n  font-family: monospace;\r\n}\r\n\r\n.latex-line {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.latex-line:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.pdf-embed {\r\n  width: 100%;\r\n}\r\n</style>"],"mappings":";;AAyBA,OAAOA,WAAU,MAAO,eAAc;AACtC,SAASC,WAAU,QAAS,sBAAqB;AAEjD,eAAe;EACbC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE;IACpB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,iBAAiBA,CAAA,EAAG;MACxB;MACA,MAAMC,MAAK,GAAI,MAAMT,WAAW,CAAC,IAAI,CAACG,SAAS,CAAC,CAACO,OAAM;MACvD,IAAI,CAACL,QAAO,GAAIM,KAAK,CAACF,MAAM,CAACG,QAAQ,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAA,GAAI,CAAC;IACnE,CAAC;IACDC,gBAAgBA,CAACC,SAAS,EAAE;MAC1B;MACA,IAAI,IAAI,CAACZ,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAACa,KAAK,CAACC,eAAc,GAAI,EAAC;MACjD;;MAEA;MACA,MAAMC,YAAW,GAAI,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,GAAE;MACzC,MAAMC,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACT,SAAQ,GAAI,EAAE,IAAI,GAAE;MAC/C,MAAMU,cAAa,GAAIV,SAAQ,GAAI,EAAC;;MAEpC;MACA,MAAMW,WAAU,GAAIR,YAAY,CAACS,aAAa,CAAC,2BAA2BL,OAAO,IAAI;MACrF,IAAII,WAAW,EAAE;QACf,MAAME,SAAQ,GAAIF,WAAW,CAACC,aAAa,CAAC,YAAY;QACxD,MAAME,YAAW,GAAID,SAAS,CAACE,gBAAgB,CAAC,MAAM;QAEtD,IAAID,YAAY,CAACJ,cAAc,CAAC,EAAE;UAChCI,YAAY,CAACJ,cAAc,CAAC,CAACT,KAAK,CAACC,eAAc,GAAI,QAAO;UAC5D,IAAI,CAACd,gBAAe,GAAI0B,YAAY,CAACJ,cAAc;UACnDC,WAAW,CAACK,cAAc,CAAC;YAAEC,QAAQ,EAAE,QAAQ;YAAEC,KAAK,EAAE;UAAS,CAAC;QACpE;MACF;IACF,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAAC/B,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAACa,KAAK,CAACC,eAAc,GAAI,EAAC;QAC/C,IAAI,CAACd,gBAAe,GAAI,IAAG;MAC7B;IACF,CAAC;IACD,MAAMgC,OAAOA,CAACC,IAAI,EAAE;MAClB,IAAI,CAACpC,SAAQ,GAAIqC,GAAG,CAACC,eAAe,CAACF,IAAI;MACzC;MACA;MACA,IAAI,CAACnC,UAAS,GAAI,CAChB,0BAA0B,EAC1B,mBAAmB,EACnB,cAAc,EACd,iBAAgB,CAClB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
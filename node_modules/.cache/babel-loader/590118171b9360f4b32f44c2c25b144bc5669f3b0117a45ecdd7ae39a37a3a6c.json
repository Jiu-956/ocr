{"ast":null,"code":"import * as pdfjsLib from \"pdfjs-dist\";\nexport default {\n  name: \"OcrResults\",\n  // ✅ 改为多单词，避免 ESLint 报错\n  props: {\n    pdfUrl: {\n      type: String,\n      default: \"\"\n    },\n    ocrResult: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      error: null\n    };\n  },\n  mounted() {\n    if (this.pdfUrl) {\n      this.renderPdf(this.pdfUrl);\n    }\n  },\n  methods: {\n    async renderPdf(url) {\n      try {\n        pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n        const loadingTask = pdfjsLib.getDocument(url);\n        const pdf = await loadingTask.promise;\n        const page = await pdf.getPage(1);\n        const scale = 1.5;\n        const viewport = page.getViewport({\n          scale\n        });\n        const canvas = this.$refs.pdfCanvas;\n        const context = canvas.getContext(\"2d\");\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n        await page.render({\n          canvasContext: context,\n          viewport: viewport\n        }).promise;\n      } catch (err) {\n        console.error(\"PDF 渲染失败:\", err);\n        this.error = \"无法加载 PDF，请检查文件格式或路径\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["pdfjsLib","name","props","pdfUrl","type","String","default","ocrResult","data","error","mounted","renderPdf","methods","url","GlobalWorkerOptions","workerSrc","version","loadingTask","getDocument","pdf","promise","page","getPage","scale","viewport","getViewport","canvas","$refs","pdfCanvas","context","getContext","height","width","render","canvasContext","err","console"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results-container\">\r\n    <h2>OCR 识别结果</h2>\r\n\r\n    <!-- PDF 渲染区域 -->\r\n    <div v-if=\"pdfUrl\" class=\"pdf-viewer\">\r\n      <canvas ref=\"pdfCanvas\"></canvas>\r\n    </div>\r\n\r\n    <!-- OCR 文本结果 -->\r\n    <div v-if=\"ocrResult\" class=\"ocr-result\">\r\n      <h3>识别的文本内容</h3>\r\n      <pre>{{ ocrResult }}</pre>\r\n    </div>\r\n\r\n    <!-- 错误提示 -->\r\n    <div v-if=\"error\" class=\"error-message\">\r\n      <p>{{ error }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\n\r\nexport default {\r\n  name: \"OcrResults\", // ✅ 改为多单词，避免 ESLint 报错\r\n  props: {\r\n    pdfUrl: { type: String, default: \"\" },\r\n    ocrResult: { type: String, default: \"\" }\r\n  },\r\n  data() {\r\n    return {\r\n      error: null\r\n    };\r\n  },\r\n  mounted() {\r\n    if (this.pdfUrl) {\r\n      this.renderPdf(this.pdfUrl);\r\n    }\r\n  },\r\n  methods: {\r\n    async renderPdf(url) {\r\n      try {\r\n        pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n          `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\n        const loadingTask = pdfjsLib.getDocument(url);\r\n        const pdf = await loadingTask.promise;\r\n\r\n        const page = await pdf.getPage(1);\r\n        const scale = 1.5;\r\n        const viewport = page.getViewport({ scale });\r\n\r\n        const canvas = this.$refs.pdfCanvas;\r\n        const context = canvas.getContext(\"2d\");\r\n        canvas.height = viewport.height;\r\n        canvas.width = viewport.width;\r\n\r\n        await page.render({\r\n          canvasContext: context,\r\n          viewport: viewport\r\n        }).promise;\r\n      } catch (err) {\r\n        console.error(\"PDF 渲染失败:\", err);\r\n        this.error = \"无法加载 PDF，请检查文件格式或路径\";\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.results-container {\r\n  padding: 20px;\r\n}\r\n\r\n.pdf-viewer {\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.ocr-result {\r\n  margin-top: 20px;\r\n  background: #f6f6f6;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  font-family: monospace;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.error-message {\r\n  margin-top: 20px;\r\n  color: red;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"AAuBA,OAAO,KAAKA,QAAO,MAAO,YAAY;AAEtC,eAAe;EACbC,IAAI,EAAE,YAAY;EAAE;EACpBC,KAAK,EAAE;IACLC,MAAM,EAAE;MAAEC,IAAI,EAAEC,MAAM;MAAEC,OAAO,EAAE;IAAG,CAAC;IACrCC,SAAS,EAAE;MAAEH,IAAI,EAAEC,MAAM;MAAEC,OAAO,EAAE;IAAG;EACzC,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACP,MAAM,EAAE;MACf,IAAI,CAACQ,SAAS,CAAC,IAAI,CAACR,MAAM,CAAC;IAC7B;EACF,CAAC;EACDS,OAAO,EAAE;IACP,MAAMD,SAASA,CAACE,GAAG,EAAE;MACnB,IAAI;QACFb,QAAQ,CAACc,mBAAmB,CAACC,SAAQ,GACnC,2CAA2Cf,QAAQ,CAACgB,OAAO,oBAAoB;QAEjF,MAAMC,WAAU,GAAIjB,QAAQ,CAACkB,WAAW,CAACL,GAAG,CAAC;QAC7C,MAAMM,GAAE,GAAI,MAAMF,WAAW,CAACG,OAAO;QAErC,MAAMC,IAAG,GAAI,MAAMF,GAAG,CAACG,OAAO,CAAC,CAAC,CAAC;QACjC,MAAMC,KAAI,GAAI,GAAG;QACjB,MAAMC,QAAO,GAAIH,IAAI,CAACI,WAAW,CAAC;UAAEF;QAAM,CAAC,CAAC;QAE5C,MAAMG,MAAK,GAAI,IAAI,CAACC,KAAK,CAACC,SAAS;QACnC,MAAMC,OAAM,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;QACvCJ,MAAM,CAACK,MAAK,GAAIP,QAAQ,CAACO,MAAM;QAC/BL,MAAM,CAACM,KAAI,GAAIR,QAAQ,CAACQ,KAAK;QAE7B,MAAMX,IAAI,CAACY,MAAM,CAAC;UAChBC,aAAa,EAAEL,OAAO;UACtBL,QAAQ,EAAEA;QACZ,CAAC,CAAC,CAACJ,OAAO;MACZ,EAAE,OAAOe,GAAG,EAAE;QACZC,OAAO,CAAC3B,KAAK,CAAC,WAAW,EAAE0B,GAAG,CAAC;QAC/B,IAAI,CAAC1B,KAAI,GAAI,qBAAqB;MACpC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"pdf-container\",\n  ref: \"pdfContainer\"\n};\nconst _hoisted_3 = {\n  class: \"latex-container\"\n};\nconst _hoisted_4 = [\"onMouseenter\", \"onMouseleave\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 左侧 PDF 区域 \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pdfPages, (page, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"pdf-page\",\n      ref_for: true,\n      ref: 'page-' + index\n    });\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createCommentVNode(\" 右侧 LaTeX 区域 \"), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.latexLines, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"latex-line\",\n      onMouseenter: $event => $options.scrollToPage(index),\n      onMouseleave: $event => $options.clearHighlight(index)\n    }, _toDisplayString(line), 41 /* TEXT, PROPS, NEED_HYDRATION */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","pdfPages","page","index","key","_hoisted_3","latexLines","line","onMouseenter","$event","$options","scrollToPage","onMouseleave","clearHighlight","_hoisted_4"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 左侧 PDF 区域 -->\r\n    <div class=\"pdf-container\" ref=\"pdfContainer\">\r\n      <div\r\n        v-for=\"(page, index) in pdfPages\"\r\n        :key=\"index\"\r\n        class=\"pdf-page\"\r\n        :ref=\"'page-' + index\"\r\n      ></div>\r\n    </div>\r\n\r\n    <!-- 右侧 LaTeX 区域 -->\r\n    <div class=\"latex-container\">\r\n      <div\r\n        v-for=\"(line, index) in latexLines\"\r\n        :key=\"index\"\r\n        class=\"latex-line\"\r\n        @mouseenter=\"scrollToPage(index)\"\r\n        @mouseleave=\"clearHighlight(index)\"\r\n      >\r\n        {{ line }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\nexport default {\r\n  props: {\r\n    pdfFile: String, // 上传的 PDF 文件路径\r\n    latexContent: String, // Nougat 输出的 LaTeX 文本\r\n  },\r\n  data() {\r\n    return {\r\n      pdfDoc: null,\r\n      pdfPages: [],\r\n      latexLines: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.latexLines = this.latexContent.split(\"\\n\");\r\n    this.loadPDF(this.pdfFile);\r\n  },\r\n  methods: {\r\n    async loadPDF(url) {\r\n      const loadingTask = pdfjsLib.getDocument(url);\r\n      this.pdfDoc = await loadingTask.promise;\r\n      const numPages = this.pdfDoc.numPages;\r\n\r\n      for (let i = 1; i <= numPages; i++) {\r\n        const page = await this.pdfDoc.getPage(i);\r\n        this.pdfPages.push(page);\r\n        this.renderPage(i, page);\r\n      }\r\n    },\r\n    async renderPage(pageNum, page) {\r\n      const container = this.$refs[\"page-\" + (pageNum - 1)][0];\r\n      const viewport = page.getViewport({ scale: 1.5 });\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = viewport.width;\r\n      canvas.height = viewport.height;\r\n      container.appendChild(canvas);\r\n\r\n      const context = canvas.getContext(\"2d\");\r\n      const renderContext = { canvasContext: context, viewport: viewport };\r\n      await page.render(renderContext).promise;\r\n    },\r\n    scrollToPage(index) {\r\n      // 假设每行 LaTeX 对应 PDF 第 index 页\r\n      const pageEl = this.$refs[\"page-\" + index][0];\r\n      const container = this.$refs.pdfContainer;\r\n      container.scrollTop = pageEl.offsetTop;\r\n\r\n      // 高亮\r\n      pageEl.style.border = \"2px solid red\";\r\n    },\r\n    clearHighlight(index) {\r\n      const pageEl = this.$refs[\"page-\" + index][0];\r\n      pageEl.style.border = \"none\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.pdf-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  background: #eee;\r\n  padding: 10px;\r\n}\r\n\r\n.pdf-page {\r\n  margin-bottom: 10px;\r\n  position: relative;\r\n}\r\n\r\n.latex-container {\r\n  width: 40%;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background: #f9f9f9;\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.latex-line {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.latex-line:hover {\r\n  background-color: #d3f3ff;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EAU1BD,KAAK,EAAC;AAAiB;;;uBAZ9BE,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBJC,mBAAA,eAAkB,EAClBC,mBAAA,CAOM,OAPNC,UAOM,I,kBANJJ,mBAAA,CAKOK,SAAA,QAAAC,WAAA,CAJmBC,KAAA,CAAAC,QAAQ,GAAxBC,IAAI,EAAEC,KAAK;yBADrBV,mBAAA,CAKO;MAHJW,GAAG,EAAED,KAAK;MACXZ,KAAK,EAAC,UAAU;;MACfC,GAAG,YAAYW;;0DAIpBR,mBAAA,iBAAoB,EACpBC,mBAAA,CAUM,OAVNS,UAUM,I,kBATJZ,mBAAA,CAQMK,SAAA,QAAAC,WAAA,CAPoBC,KAAA,CAAAM,UAAU,GAA1BC,IAAI,EAAEJ,KAAK;yBADrBV,mBAAA,CAQM;MANHW,GAAG,EAAED,KAAK;MACXZ,KAAK,EAAC,YAAY;MACjBiB,YAAU,EAAAC,MAAA,IAAEC,QAAA,CAAAC,YAAY,CAACR,KAAK;MAC9BS,YAAU,EAAAH,MAAA,IAAEC,QAAA,CAAAG,cAAc,CAACV,KAAK;wBAE9BI,IAAI,yCAAAO,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
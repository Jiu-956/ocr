{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { mapState } from 'vuex';\nimport * as pdfjsLib from 'pdfjs-dist';\nexport default {\n  name: 'OcrResults',\n  computed: {\n    ...mapState(['ocrResults']),\n    hasData() {\n      // 需要：ocrResults.file 为 File；latex 为数组或文本\n      return !!(this.ocrResults && this.ocrResults.file && (this.ocrResults.latex || this.ocrResults.text));\n    }\n  },\n  data() {\n    return {\n      pdfDoc: null,\n      pageViews: [],\n      // { pageNumber, viewport } 列表\n      canvasRefs: [],\n      // canvas DOM refs\n      pageRefs: [],\n      // 每页容器 DOM refs\n      activePageIndex: -1,\n      // 当前高亮页\n      latexLines: [],\n      // 渲染到右侧的 HTML 行\n      lineToPageMap: [] // 行 -> 页索引 的映射\n    };\n  },\n  async mounted() {\n    if (!this.hasData) return;\n\n    // 1) 载入 PDF（不使用 pdf_viewer.css；禁用 worker 规避打包问题）\n    await this.loadPDF(this.ocrResults.file);\n\n    // 2) 准备 LaTeX 行（优先使用 ocrResults.latex；否则从 text 按行拆分）\n    const rawLatex = Array.isArray(this.ocrResults.latex) ? this.ocrResults.latex : typeof this.ocrResults.latex === 'string' ? this.ocrResults.latex.split('\\n') : this.ocrResults.text ? String(this.ocrResults.text).split('\\n') : [];\n    await this.loadLatex(rawLatex);\n\n    // 3) 准备行->页映射（如果后端给了 mapping 就用，没有则用等分近似）\n    this.buildLineToPageMap(rawLatex.length);\n  },\n  methods: {\n    goBack() {\n      this.$store.commit('resetState');\n      this.$router.push('/');\n    },\n    // 加载并渲染整份 PDF（逐页画到 canvas）\n    async loadPDF(file) {\n      try {\n        const buffer = await file.arrayBuffer();\n        const loadingTask = pdfjsLib.getDocument({\n          data: buffer,\n          disableWorker: true // 🚫 不使用 worker，避免额外打包配置\n        });\n        this.pdfDoc = await loadingTask.promise;\n        this.pageViews = Array.from({\n          length: this.pdfDoc.numPages\n        }, (_, i) => ({\n          pageNumber: i + 1,\n          viewport: null\n        }));\n\n        // 顺序渲染每一页\n        for (let i = 0; i < this.pageViews.length; i++) {\n          await this.renderPage(i);\n        }\n      } catch (err) {\n        console.error('加载/渲染 PDF 出错：', err);\n      }\n    },\n    async renderPage(index) {\n      const pageNumber = index + 1;\n      const page = await this.pdfDoc.getPage(pageNumber);\n      const viewport = page.getViewport({\n        scale: 1.5\n      });\n      this.pageViews[index].viewport = viewport;\n      const canvas = this.canvasRefs[index];\n      const ctx = canvas.getContext('2d');\n      canvas.width = Math.ceil(viewport.width);\n      canvas.height = Math.ceil(viewport.height);\n      await page.render({\n        canvasContext: ctx,\n        viewport\n      }).promise;\n    },\n    // 用 MathJax 渲染 LaTeX 行；如果没加载 MathJax，则退化为原文\n    async loadLatex(lines) {\n      const mj = window.MathJax;\n      if (!mj || !mj.tex2chtml) {\n        // 退化：不渲染，直接显示原文本\n        this.latexLines = lines.map(l => this.escapeHtml(l)).map(html => `<pre class=\"plain\">${html}</pre>`);\n        return;\n      }\n      this.latexLines = lines.map(line => mj.tex2chtml(line).outerHTML);\n      // 让 MathJax 遍历 typeset（防止初次插入不布局）\n      await mj.typesetPromise?.();\n    },\n    // 行 -> 页 映射\n    buildLineToPageMap(totalLines) {\n      // 如果你的后端能返回精确映射（例如：每行带 pageIndex），可以放到 ocrResults.linePageMap\n      if (Array.isArray(this.ocrResults.linePageMap) && this.ocrResults.linePageMap.length === totalLines) {\n        this.lineToPageMap = this.ocrResults.linePageMap;\n        return;\n      }\n\n      // 没有映射就均匀等分：把行按页平均分配（页级定位）\n      const pages = this.pageViews.length || 1;\n      this.lineToPageMap = Array.from({\n        length: totalLines\n      }, (_, i) => {\n        const pageIdx = Math.min(pages - 1, Math.floor(i * pages / Math.max(1, totalLines)));\n        return pageIdx;\n      });\n    },\n    // 悬停联动：滚动到对应页并高亮页框\n    highlightLine(lineIndex) {\n      const pageIdx = this.lineToPageMap[lineIndex] ?? 0;\n      const pageEl = this.pageRefs[pageIdx];\n      if (!pageEl) return;\n\n      // 滚动到该页（居中）\n      pageEl.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n\n      // 高亮该页\n      this.activePageIndex = pageIdx;\n    },\n    clearHighlight() {\n      this.activePageIndex = -1;\n    },\n    escapeHtml(s) {\n      return String(s).replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;');\n    }\n  }\n};","map":{"version":3,"names":["mapState","pdfjsLib","name","computed","hasData","ocrResults","file","latex","text","data","pdfDoc","pageViews","canvasRefs","pageRefs","activePageIndex","latexLines","lineToPageMap","mounted","loadPDF","rawLatex","Array","isArray","split","String","loadLatex","buildLineToPageMap","length","methods","goBack","$store","commit","$router","push","buffer","arrayBuffer","loadingTask","getDocument","disableWorker","promise","from","numPages","_","i","pageNumber","viewport","renderPage","err","console","error","index","page","getPage","getViewport","scale","canvas","ctx","getContext","width","Math","ceil","height","render","canvasContext","lines","mj","window","MathJax","tex2chtml","map","l","escapeHtml","html","line","outerHTML","typesetPromise","totalLines","linePageMap","pages","pageIdx","min","floor","max","highlightLine","lineIndex","pageEl","scrollIntoView","behavior","block","clearHighlight","s","replaceAll"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results\">\r\n    <h2>OCR Results</h2>\r\n\r\n    <div v-if=\"hasData\" class=\"results-container\">\r\n      <div class=\"split\">\r\n        <!-- 左：PDF 渲染（每页一个 canvas） -->\r\n        <div class=\"pdf-pane\" ref=\"pdfPane\">\r\n          <div\r\n            v-for=\"(page, i) in pageViews\"\r\n            :key=\"i\"\r\n            class=\"pdf-page\"\r\n            :class=\"{ active: i === activePageIndex }\"\r\n            :ref=\"el => pageRefs[i] = el\"\r\n          >\r\n            <canvas :ref=\"el => canvasRefs[i] = el\"></canvas>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 右：LaTeX 行列表（MathJax 渲染） -->\r\n        <div class=\"latex-pane\" ref=\"latexPane\">\r\n          <div\r\n            v-for=\"(line, idx) in latexLines\"\r\n            :key=\"idx\"\r\n            class=\"latex-line\"\r\n            @mouseenter=\"highlightLine(idx)\"\r\n            @mouseleave=\"clearHighlight\"\r\n            v-html=\"line\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"no-results\">\r\n      <p>暂无可渲染的数据。请先上传 PDF 并确保 Vuex 的 ocrResults 中有 <code>file</code>（File 对象）和 <code>latex</code>（数组或文本）。</p>\r\n    </div>\r\n\r\n    <button @click=\"goBack\" class=\"back-button\">Process Another File</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\nimport * as pdfjsLib from 'pdfjs-dist'\r\n\r\nexport default {\r\n  name: 'OcrResults',\r\n  computed: {\r\n    ...mapState(['ocrResults']),\r\n    hasData() {\r\n      // 需要：ocrResults.file 为 File；latex 为数组或文本\r\n      return !!(this.ocrResults && this.ocrResults.file && (this.ocrResults.latex || this.ocrResults.text))\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      pdfDoc: null,\r\n      pageViews: [],              // { pageNumber, viewport } 列表\r\n      canvasRefs: [],             // canvas DOM refs\r\n      pageRefs: [],               // 每页容器 DOM refs\r\n      activePageIndex: -1,        // 当前高亮页\r\n      latexLines: [],             // 渲染到右侧的 HTML 行\r\n      lineToPageMap: []           // 行 -> 页索引 的映射\r\n    }\r\n  },\r\n  async mounted() {\r\n    if (!this.hasData) return\r\n\r\n    // 1) 载入 PDF（不使用 pdf_viewer.css；禁用 worker 规避打包问题）\r\n    await this.loadPDF(this.ocrResults.file)\r\n\r\n    // 2) 准备 LaTeX 行（优先使用 ocrResults.latex；否则从 text 按行拆分）\r\n    const rawLatex = Array.isArray(this.ocrResults.latex)\r\n      ? this.ocrResults.latex\r\n      : (typeof this.ocrResults.latex === 'string'\r\n          ? this.ocrResults.latex.split('\\n')\r\n          : (this.ocrResults.text ? String(this.ocrResults.text).split('\\n') : []))\r\n\r\n    await this.loadLatex(rawLatex)\r\n\r\n    // 3) 准备行->页映射（如果后端给了 mapping 就用，没有则用等分近似）\r\n    this.buildLineToPageMap(rawLatex.length)\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.$store.commit('resetState')\r\n      this.$router.push('/')\r\n    },\r\n\r\n    // 加载并渲染整份 PDF（逐页画到 canvas）\r\n    async loadPDF(file) {\r\n      try {\r\n        const buffer = await file.arrayBuffer()\r\n        const loadingTask = pdfjsLib.getDocument({\r\n          data: buffer,\r\n          disableWorker: true // 🚫 不使用 worker，避免额外打包配置\r\n        })\r\n        this.pdfDoc = await loadingTask.promise\r\n\r\n        this.pageViews = Array.from({ length: this.pdfDoc.numPages }, (_, i) => ({\r\n          pageNumber: i + 1,\r\n          viewport: null\r\n        }))\r\n\r\n        // 顺序渲染每一页\r\n        for (let i = 0; i < this.pageViews.length; i++) {\r\n          await this.renderPage(i)\r\n        }\r\n      } catch (err) {\r\n        console.error('加载/渲染 PDF 出错：', err)\r\n      }\r\n    },\r\n\r\n    async renderPage(index) {\r\n      const pageNumber = index + 1\r\n      const page = await this.pdfDoc.getPage(pageNumber)\r\n      const viewport = page.getViewport({ scale: 1.5 })\r\n      this.pageViews[index].viewport = viewport\r\n\r\n      const canvas = this.canvasRefs[index]\r\n      const ctx = canvas.getContext('2d')\r\n      canvas.width = Math.ceil(viewport.width)\r\n      canvas.height = Math.ceil(viewport.height)\r\n\r\n      await page.render({ canvasContext: ctx, viewport }).promise\r\n    },\r\n\r\n    // 用 MathJax 渲染 LaTeX 行；如果没加载 MathJax，则退化为原文\r\n    async loadLatex(lines) {\r\n      const mj = window.MathJax\r\n      if (!mj || !mj.tex2chtml) {\r\n        // 退化：不渲染，直接显示原文本\r\n        this.latexLines = lines.map(l => this.escapeHtml(l)).map(html => `<pre class=\"plain\">${html}</pre>`)\r\n        return\r\n      }\r\n      this.latexLines = lines.map(line => mj.tex2chtml(line).outerHTML)\r\n      // 让 MathJax 遍历 typeset（防止初次插入不布局）\r\n      await mj.typesetPromise?.()\r\n    },\r\n\r\n    // 行 -> 页 映射\r\n    buildLineToPageMap(totalLines) {\r\n      // 如果你的后端能返回精确映射（例如：每行带 pageIndex），可以放到 ocrResults.linePageMap\r\n      if (Array.isArray(this.ocrResults.linePageMap) && this.ocrResults.linePageMap.length === totalLines) {\r\n        this.lineToPageMap = this.ocrResults.linePageMap\r\n        return\r\n      }\r\n\r\n      // 没有映射就均匀等分：把行按页平均分配（页级定位）\r\n      const pages = this.pageViews.length || 1\r\n      this.lineToPageMap = Array.from({ length: totalLines }, (_, i) => {\r\n        const pageIdx = Math.min(pages - 1, Math.floor(i * pages / Math.max(1, totalLines)))\r\n        return pageIdx\r\n      })\r\n    },\r\n\r\n    // 悬停联动：滚动到对应页并高亮页框\r\n    highlightLine(lineIndex) {\r\n      const pageIdx = this.lineToPageMap[lineIndex] ?? 0\r\n      const pageEl = this.pageRefs[pageIdx]\r\n      if (!pageEl) return\r\n\r\n      // 滚动到该页（居中）\r\n      pageEl.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n\r\n      // 高亮该页\r\n      this.activePageIndex = pageIdx\r\n    },\r\n\r\n    clearHighlight() {\r\n      this.activePageIndex = -1\r\n    },\r\n\r\n    escapeHtml(s) {\r\n      return String(s)\r\n        .replaceAll('&', '&amp;')\r\n        .replaceAll('<', '&lt;')\r\n        .replaceAll('>', '&gt;')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.results {\r\n  padding: 1rem;\r\n}\r\n\r\n.results-container {\r\n  margin-top: 1rem;\r\n}\r\n\r\n/* 两栏布局 */\r\n.split {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 12px;\r\n  height: 80vh;\r\n}\r\n\r\n/* 左侧 PDF */\r\n.pdf-pane {\r\n  overflow: auto;\r\n  background: #f5f7fa;\r\n  padding: 8px;\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 8px;\r\n}\r\n\r\n.pdf-page {\r\n  margin: 8px auto;\r\n  padding: 4px;\r\n  border: 2px solid transparent;\r\n  border-radius: 6px;\r\n  width: max-content;\r\n  max-width: 100%;\r\n}\r\n\r\n.pdf-page.active {\r\n  border-color: #ef4444; /* 悬停对应页高亮红框 */\r\n  box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.15);\r\n}\r\n\r\n/* 右侧 LaTeX 区 */\r\n.latex-pane {\r\n  overflow: auto;\r\n  padding: 8px 12px;\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 8px;\r\n  background: #fff;\r\n}\r\n\r\n.latex-line {\r\n  padding: 6px 8px;\r\n  border-radius: 6px;\r\n  cursor: default;\r\n}\r\n\r\n.latex-line:hover {\r\n  background: #fff7cc;\r\n}\r\n\r\n/* 纯文本降级样式 */\r\npre.plain {\r\n  margin: 0;\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 其它 */\r\n.no-results {\r\n  margin: 2rem 0;\r\n  color: #666;\r\n  text-align: center;\r\n}\r\n\r\n.back-button {\r\n  margin-top: 1.25rem;\r\n  background-color: #42b983;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.75rem 1.25rem;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n}\r\n.back-button:hover { background-color: #3aa876; }\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
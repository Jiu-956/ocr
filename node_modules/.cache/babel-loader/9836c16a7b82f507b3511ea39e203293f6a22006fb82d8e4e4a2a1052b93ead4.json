{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  name: \"OcrResults\",\n  setup() {\n    const store = useStore();\n    const pdfUrl = computed(() => store.state.ocrResults?.pdfUrl);\n    const latexText = computed(() => store.state.ocrResults?.text || \"\");\n    const currentPage = ref(1);\n    const totalPages = ref(5);\n    const fileName = ref(\"\");\n\n    // LaTeX 按行拆分\n    const latexLines = computed(() => {\n      if (latexText.value) {\n        return latexText.value.split(\"\\n\").filter(line => line.trim() !== \"\");\n      }\n      // 如果没有从store获取到数据，使用默认示例数据\n      return ['\\\\documentclass{article}', '\\\\usepackage{amsmath}', '\\\\usepackage{amssymb}', '\\\\begin{document}', '\\\\title{OCR智能平台技术文档}', '\\\\author{OCR Team}', '\\\\date{\\\\today}', '\\\\maketitle', '', '# Nougat: Neural Optical Understanding for Academic Documents', 'Lukas Blecher', 'Guillem Cucurull', 'Thomas Scialom', 'Robert Stojnic', 'Meta AI', '', '###### Abstract', 'Scientific knowledge is predominantly stored in books and scientific journals, often in the form of PDFs.', 'However, the PDF format leads to a loss of semantic information, particularly for mathematical expressions.', 'We propose Nougat (**N**eural **O**ptical **U**ndertaking for **A**academic **D**e**cuments),', 'a Visual Transformer model that performs an _Optical Character Recognition_ (OCR) task', 'for processing scientific documents into a markup language,', 'and demonstrate the effectiveness of our model on a new dataset of scientific documents.', 'The proposed approach offers a promising solution to enhance the accessibility', 'of scientific knowledge in the digital age, by bridging the gap between', 'human-readable documents and machine-readable text.', 'We release the models and code to accelerate future work on scientific text recognition.'];\n    });\n\n    // 文件上传处理\n    const handleFileUpload = event => {\n      const file = event.target.files[0];\n      if (file && file.type === 'application/pdf') {\n        fileName.value = file.name;\n        const fileUrl = URL.createObjectURL(file);\n\n        // 存储到Vuex\n        store.commit('setOcrResults', {\n          pdfUrl: fileUrl,\n          text: \"\",\n          // 这里应该调用Nougat API获取实际文本\n          fileName: file.name\n        });\n\n        // 处理PDF并获取LaTeX输出\n        processPDFWithNougat();\n      }\n    };\n\n    // 处理PDF并获取LaTeX输出\n    const processPDFWithNougat = () => {\n      // 这里应该调用Nougat API处理PDF\n      // 暂时使用模拟数据\n      console.log(\"Processing PDF with Nougat...\");\n    };\n\n    // 鼠标悬停处理\n    const handleLineHover = lineIndex => {\n      scrollToCorrespondingPage(lineIndex);\n    };\n\n    // 滚动到对应页面\n    const scrollToCorrespondingPage = lineIndex => {\n      const targetPage = Math.floor(lineIndex / 10) + 1;\n      if (targetPage >= 1 && targetPage <= totalPages.value) {\n        currentPage.value = targetPage;\n      }\n    };\n\n    // 页面导航\n    const prevPage = () => {\n      if (currentPage.value > 1) currentPage.value--;\n    };\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) currentPage.value++;\n    };\n\n    // 复制LaTeX\n    const copyLaTeX = () => {\n      const text = latexLines.value.join('\\n');\n      navigator.clipboard.writeText(text).then(() => {\n        alert('LaTeX内容已复制到剪贴板');\n      });\n    };\n\n    // 下载LaTeX\n    const downloadLaTeX = () => {\n      const text = latexLines.value.join('\\n');\n      const blob = new Blob([text], {\n        type: 'text/plain'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName.value ? `${fileName.value.replace('.pdf', '')}.tex` : 'output.tex';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    };\n    onMounted(() => {\n      if (!pdfUrl.value) {\n        console.log(\"等待用户上传PDF文件\");\n      }\n    });\n    return {\n      pdfUrl,\n      latexLines,\n      currentPage,\n      totalPages,\n      handleFileUpload,\n      handleLineHover,\n      prevPage,\n      nextPage,\n      copyLaTeX,\n      downloadLaTeX\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","name","setup","store","pdfUrl","state","ocrResults","latexText","text","currentPage","totalPages","fileName","latexLines","value","split","filter","line","trim","handleFileUpload","event","file","target","files","type","fileUrl","URL","createObjectURL","commit","processPDFWithNougat","console","log","handleLineHover","lineIndex","scrollToCorrespondingPage","targetPage","Math","floor","prevPage","nextPage","copyLaTeX","join","navigator","clipboard","writeText","then","alert","downloadLaTeX","blob","Blob","url","a","document","createElement","href","download","replace","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results\">\r\n    <!-- 上传区域 -->\r\n    <div v-if=\"!pdfUrl\" class=\"upload-section\">\r\n      <div class=\"upload-card\">\r\n        <input\r\n          type=\"file\"\r\n          id=\"pdf-upload\"\r\n          accept=\".pdf\"\r\n          @change=\"handleFileUpload\"\r\n          class=\"file-input\"\r\n        />\r\n        <label for=\"pdf-upload\" class=\"upload-label\">\r\n          <div class=\"upload-icon\">\r\n            <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n              <polyline points=\"17 8 12 3 7 8\"></polyline>\r\n              <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line>\r\n            </svg>\r\n          </div>\r\n          <h3>上传PDF文件</h3>\r\n          <p>支持所有标准的PDF文档格式</p>\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- PDF和LaTeX显示区域 -->\r\n    <div v-if=\"pdfUrl\" class=\"display-section\">\r\n      <div class=\"split-view\">\r\n        <!-- 左侧PDF预览 -->\r\n        <div class=\"pdf-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3>PDF预览</h3>\r\n            <div class=\"page-controls\">\r\n              <button @click=\"prevPage\" :disabled=\"currentPage <= 1\">上一页</button>\r\n              <span>第 {{ currentPage }} 页 / 共 {{ totalPages }} 页</span>\r\n              <button @click=\"nextPage\" :disabled=\"currentPage >= totalPages\">下一页</button>\r\n            </div>\r\n          </div>\r\n          <div class=\"pdf-container\">\r\n            <iframe\r\n              :src=\"`${pdfUrl}#page=${currentPage}`\"\r\n              class=\"pdf-iframe\"\r\n              frameborder=\"0\"\r\n            ></iframe>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 右侧LaTeX输出 -->\r\n        <div class=\"latex-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3>Nougat LaTeX 输出</h3>\r\n            <div class=\"latex-controls\">\r\n              <button @click=\"copyLaTeX\" class=\"copy-btn\">复制全部</button>\r\n              <button @click=\"downloadLaTeX\" class=\"download-btn\">下载</button>\r\n            </div>\r\n          </div>\r\n          <div class=\"latex-output\">\r\n            <div\r\n              v-for=\"(line, index) in latexLines\"\r\n              :key=\"index\"\r\n              class=\"latex-line\"\r\n              @mouseenter=\"handleLineHover(index)\"\r\n            >\r\n              <span class=\"line-number\">{{ index + 1 }}</span>\r\n              <span class=\"line-content\">{{ line }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nexport default {\r\n  name: \"OcrResults\",\r\n  setup() {\r\n    const store = useStore();\r\n    const pdfUrl = computed(() => store.state.ocrResults?.pdfUrl);\r\n    const latexText = computed(() => store.state.ocrResults?.text || \"\");\r\n    const currentPage = ref(1);\r\n    const totalPages = ref(5);\r\n    const fileName = ref(\"\");\r\n\r\n    // LaTeX 按行拆分\r\n    const latexLines = computed(() => {\r\n      if (latexText.value) {\r\n        return latexText.value.split(\"\\n\").filter(line => line.trim() !== \"\");\r\n      }\r\n      // 如果没有从store获取到数据，使用默认示例数据\r\n      return [\r\n        '\\\\documentclass{article}',\r\n        '\\\\usepackage{amsmath}',\r\n        '\\\\usepackage{amssymb}',\r\n        '\\\\begin{document}',\r\n        '\\\\title{OCR智能平台技术文档}',\r\n        '\\\\author{OCR Team}',\r\n        '\\\\date{\\\\today}',\r\n        '\\\\maketitle',\r\n        '',\r\n        '# Nougat: Neural Optical Understanding for Academic Documents',\r\n        'Lukas Blecher',\r\n        'Guillem Cucurull',\r\n        'Thomas Scialom',\r\n        'Robert Stojnic',\r\n        'Meta AI',\r\n        '',\r\n        '###### Abstract',\r\n        'Scientific knowledge is predominantly stored in books and scientific journals, often in the form of PDFs.',\r\n        'However, the PDF format leads to a loss of semantic information, particularly for mathematical expressions.',\r\n        'We propose Nougat (**N**eural **O**ptical **U**ndertaking for **A**academic **D**e**cuments),',\r\n        'a Visual Transformer model that performs an _Optical Character Recognition_ (OCR) task',\r\n        'for processing scientific documents into a markup language,',\r\n        'and demonstrate the effectiveness of our model on a new dataset of scientific documents.',\r\n        'The proposed approach offers a promising solution to enhance the accessibility',\r\n        'of scientific knowledge in the digital age, by bridging the gap between',\r\n        'human-readable documents and machine-readable text.',\r\n        'We release the models and code to accelerate future work on scientific text recognition.'\r\n      ];\r\n    });\r\n\r\n    // 文件上传处理\r\n    const handleFileUpload = (event) => {\r\n      const file = event.target.files[0];\r\n      if (file && file.type === 'application/pdf') {\r\n        fileName.value = file.name;\r\n        const fileUrl = URL.createObjectURL(file);\r\n        \r\n        // 存储到Vuex\r\n        store.commit('setOcrResults', {\r\n          pdfUrl: fileUrl,\r\n          text: \"\", // 这里应该调用Nougat API获取实际文本\r\n          fileName: file.name\r\n        });\r\n\r\n        // 处理PDF并获取LaTeX输出\r\n        processPDFWithNougat();\r\n      }\r\n    };\r\n\r\n    // 处理PDF并获取LaTeX输出\r\n    const processPDFWithNougat = () => {\r\n      // 这里应该调用Nougat API处理PDF\r\n      // 暂时使用模拟数据\r\n      console.log(\"Processing PDF with Nougat...\");\r\n    };\r\n\r\n    // 鼠标悬停处理\r\n    const handleLineHover = (lineIndex) => {\r\n      scrollToCorrespondingPage(lineIndex);\r\n    };\r\n\r\n    // 滚动到对应页面\r\n    const scrollToCorrespondingPage = (lineIndex) => {\r\n      const targetPage = Math.floor(lineIndex / 10) + 1;\r\n      if (targetPage >= 1 && targetPage <= totalPages.value) {\r\n        currentPage.value = targetPage;\r\n      }\r\n    };\r\n\r\n    // 页面导航\r\n    const prevPage = () => {\r\n      if (currentPage.value > 1) currentPage.value--;\r\n    };\r\n\r\n    const nextPage = () => {\r\n      if (currentPage.value < totalPages.value) currentPage.value++;\r\n    };\r\n\r\n    // 复制LaTeX\r\n    const copyLaTeX = () => {\r\n      const text = latexLines.value.join('\\n');\r\n      navigator.clipboard.writeText(text).then(() => {\r\n        alert('LaTeX内容已复制到剪贴板');\r\n      });\r\n    };\r\n\r\n    // 下载LaTeX\r\n    const downloadLaTeX = () => {\r\n      const text = latexLines.value.join('\\n');\r\n      const blob = new Blob([text], { type: 'text/plain' });\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = fileName.value ? `${fileName.value.replace('.pdf', '')}.tex` : 'output.tex';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      URL.revokeObjectURL(url);\r\n    };\r\n\r\n    onMounted(() => {\r\n      if (!pdfUrl.value) {\r\n        console.log(\"等待用户上传PDF文件\");\r\n      }\r\n    });\r\n\r\n    return {\r\n      pdfUrl,\r\n      latexLines,\r\n      currentPage,\r\n      totalPages,\r\n      handleFileUpload,\r\n      handleLineHover,\r\n      prevPage,\r\n      nextPage,\r\n      copyLaTeX,\r\n      downloadLaTeX\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.results {\r\n  padding: 20px;\r\n  min-height: calc(100vh - 140px);\r\n}\r\n\r\n/* 上传区域 */\r\n.upload-section {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 400px;\r\n}\r\n\r\n.upload-card {\r\n  background: white;\r\n  border: 2px dashed #ddd;\r\n  border-radius: 12px;\r\n  padding: 3rem;\r\n  text-align: center;\r\n  transition: all 0.3s ease;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  max-width: 500px;\r\n}\r\n\r\n.upload-card:hover {\r\n  border-color: #667eea;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-label {\r\n  cursor: pointer;\r\n}\r\n\r\n.upload-icon {\r\n  color: #667eea;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-label h3 {\r\n  margin-bottom: 0.5rem;\r\n  color: #2c3e50;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.upload-label p {\r\n  color: #7f8c8d;\r\n  font-size: 1rem;\r\n}\r\n\r\n/* 分割视图 */\r\n.display-section {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 20px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.split-view {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  height: 600px;\r\n}\r\n\r\n.pdf-panel, .latex-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-right: 1px solid #eee;\r\n}\r\n\r\n.latex-panel {\r\n  border-right: none;\r\n}\r\n\r\n.panel-header {\r\n  padding: 1rem 1.5rem;\r\n  background: #f8f9fa;\r\n  border-bottom: 1px solid #eee;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.panel-header h3 {\r\n  color: #2c3e50;\r\n  font-size: 1.1rem;\r\n  margin: 0;\r\n}\r\n\r\n.page-controls, .latex-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.page-controls button, .copy-btn, .download-btn {\r\n  padding: 0.5rem 1rem;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.page-controls button:hover:not(:disabled), \r\n.copy-btn:hover, \r\n.download-btn:hover {\r\n  background: #667eea;\r\n  color: white;\r\n  border-color: #667eea;\r\n}\r\n\r\n.page-controls button:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* PDF容器 */\r\n.pdf-container {\r\n  flex: 1;\r\n  overflow: auto;\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.pdf-iframe {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 500px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* LaTeX输出 */\r\n.latex-output {\r\n  flex: 1;\r\n  overflow: auto;\r\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\r\n  font-size: 13px;\r\n  line-height: 1.5;\r\n}\r\n\r\n.latex-line {\r\n  padding: 4px 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: all 0.2s ease;\r\n  cursor: pointer;\r\n}\r\n\r\n.latex-line:hover {\r\n  background: #f0f7ff;\r\n}\r\n\r\n.line-number {\r\n  min-width: 40px;\r\n  color: #7f8c8d;\r\n  font-size: 11px;\r\n  user-select: none;\r\n}\r\n\r\n.line-content {\r\n  flex: 1;\r\n  white-space: pre-wrap;\r\n  word-break: break-all;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .split-view {\r\n    grid-template-columns: 1fr;\r\n    height: auto;\r\n  }\r\n  \r\n  .pdf-panel, .latex-panel {\r\n    height: 400px;\r\n  }\r\n  \r\n  .upload-card {\r\n    padding: 2rem;\r\n    margin: 1rem;\r\n  }\r\n}\r\n</style>"],"mappings":";;AA2EA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAK;AAC9C,SAASC,QAAO,QAAS,MAAM;AAE/B,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIH,QAAQ,CAAC,CAAC;IACxB,MAAMI,MAAK,GAAIN,QAAQ,CAAC,MAAMK,KAAK,CAACE,KAAK,CAACC,UAAU,EAAEF,MAAM,CAAC;IAC7D,MAAMG,SAAQ,GAAIT,QAAQ,CAAC,MAAMK,KAAK,CAACE,KAAK,CAACC,UAAU,EAAEE,IAAG,IAAK,EAAE,CAAC;IACpE,MAAMC,WAAU,GAAIZ,GAAG,CAAC,CAAC,CAAC;IAC1B,MAAMa,UAAS,GAAIb,GAAG,CAAC,CAAC,CAAC;IACzB,MAAMc,QAAO,GAAId,GAAG,CAAC,EAAE,CAAC;;IAExB;IACA,MAAMe,UAAS,GAAId,QAAQ,CAAC,MAAM;MAChC,IAAIS,SAAS,CAACM,KAAK,EAAE;QACnB,OAAON,SAAS,CAACM,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC,MAAM,EAAE,CAAC;MACvE;MACA;MACA,OAAO,CACL,0BAA0B,EAC1B,uBAAuB,EACvB,uBAAuB,EACvB,mBAAmB,EACnB,sBAAsB,EACtB,oBAAoB,EACpB,iBAAiB,EACjB,aAAa,EACb,EAAE,EACF,+DAA+D,EAC/D,eAAe,EACf,kBAAkB,EAClB,gBAAgB,EAChB,gBAAgB,EAChB,SAAS,EACT,EAAE,EACF,iBAAiB,EACjB,2GAA2G,EAC3G,6GAA6G,EAC7G,+FAA+F,EAC/F,wFAAwF,EACxF,6DAA6D,EAC7D,0FAA0F,EAC1F,gFAAgF,EAChF,yEAAyE,EACzE,qDAAqD,EACrD,0FAAyF,CAC1F;IACH,CAAC,CAAC;;IAEF;IACA,MAAMC,gBAAe,GAAKC,KAAK,IAAK;MAClC,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAG,IAAKA,IAAI,CAACG,IAAG,KAAM,iBAAiB,EAAE;QAC3CZ,QAAQ,CAACE,KAAI,GAAIO,IAAI,CAACnB,IAAI;QAC1B,MAAMuB,OAAM,GAAIC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;;QAEzC;QACAjB,KAAK,CAACwB,MAAM,CAAC,eAAe,EAAE;UAC5BvB,MAAM,EAAEoB,OAAO;UACfhB,IAAI,EAAE,EAAE;UAAE;UACVG,QAAQ,EAAES,IAAI,CAACnB;QACjB,CAAC,CAAC;;QAEF;QACA2B,oBAAoB,CAAC,CAAC;MACxB;IACF,CAAC;;IAED;IACA,MAAMA,oBAAmB,GAAIA,CAAA,KAAM;MACjC;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC;;IAED;IACA,MAAMC,eAAc,GAAKC,SAAS,IAAK;MACrCC,yBAAyB,CAACD,SAAS,CAAC;IACtC,CAAC;;IAED;IACA,MAAMC,yBAAwB,GAAKD,SAAS,IAAK;MAC/C,MAAME,UAAS,GAAIC,IAAI,CAACC,KAAK,CAACJ,SAAQ,GAAI,EAAE,IAAI,CAAC;MACjD,IAAIE,UAAS,IAAK,KAAKA,UAAS,IAAKxB,UAAU,CAACG,KAAK,EAAE;QACrDJ,WAAW,CAACI,KAAI,GAAIqB,UAAU;MAChC;IACF,CAAC;;IAED;IACA,MAAMG,QAAO,GAAIA,CAAA,KAAM;MACrB,IAAI5B,WAAW,CAACI,KAAI,GAAI,CAAC,EAAEJ,WAAW,CAACI,KAAK,EAAE;IAChD,CAAC;IAED,MAAMyB,QAAO,GAAIA,CAAA,KAAM;MACrB,IAAI7B,WAAW,CAACI,KAAI,GAAIH,UAAU,CAACG,KAAK,EAAEJ,WAAW,CAACI,KAAK,EAAE;IAC/D,CAAC;;IAED;IACA,MAAM0B,SAAQ,GAAIA,CAAA,KAAM;MACtB,MAAM/B,IAAG,GAAII,UAAU,CAACC,KAAK,CAAC2B,IAAI,CAAC,IAAI,CAAC;MACxCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACnC,IAAI,CAAC,CAACoC,IAAI,CAAC,MAAM;QAC7CC,KAAK,CAAC,gBAAgB,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMC,aAAY,GAAIA,CAAA,KAAM;MAC1B,MAAMtC,IAAG,GAAII,UAAU,CAACC,KAAK,CAAC2B,IAAI,CAAC,IAAI,CAAC;MACxC,MAAMO,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACxC,IAAI,CAAC,EAAE;QAAEe,IAAI,EAAE;MAAa,CAAC,CAAC;MACrD,MAAM0B,GAAE,GAAIxB,GAAG,CAACC,eAAe,CAACqB,IAAI,CAAC;MACrC,MAAMG,CAAA,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,IAAG,GAAIJ,GAAG;MACZC,CAAC,CAACI,QAAO,GAAI3C,QAAQ,CAACE,KAAI,GAAI,GAAGF,QAAQ,CAACE,KAAK,CAAC0C,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,MAAK,GAAI,YAAY;MACxFJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,CAAC,CAAC;MAC5BA,CAAC,CAACQ,KAAK,CAAC,CAAC;MACTP,QAAQ,CAACK,IAAI,CAACG,WAAW,CAACT,CAAC,CAAC;MAC5BzB,GAAG,CAACmC,eAAe,CAACX,GAAG,CAAC;IAC1B,CAAC;IAEDlD,SAAS,CAAC,MAAM;MACd,IAAI,CAACK,MAAM,CAACS,KAAK,EAAE;QACjBgB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC5B;IACF,CAAC,CAAC;IAEF,OAAO;MACL1B,MAAM;MACNQ,UAAU;MACVH,WAAW;MACXC,UAAU;MACVQ,gBAAgB;MAChBa,eAAe;MACfM,QAAQ;MACRC,QAAQ;MACRC,SAAS;MACTO;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
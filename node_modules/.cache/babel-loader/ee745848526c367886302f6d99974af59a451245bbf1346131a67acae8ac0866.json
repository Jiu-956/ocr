{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"results\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"pdf-container\"\n};\nconst _hoisted_3 = {\n  ref: \"pdfCanvas\"\n};\nconst _hoisted_4 = {\n  class: \"ocr-result\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" PDF 预览 \"), $props.pdfUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"canvas\", _hoisted_3, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" OCR 结果 \"), _createElementVNode(\"div\", _hoisted_4, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"识别结果\", -1 /* CACHED */)), _createElementVNode(\"pre\", null, _toDisplayString($props.ocrText), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$props","pdfUrl","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_toDisplayString","ocrText"],"sources":["D:\\OCR\\ocr\\src\\views\\Results.vue"],"sourcesContent":["<template>\r\n  <div class=\"results\">\r\n    <!-- PDF 预览 -->\r\n    <div v-if=\"pdfUrl\" class=\"pdf-container\">\r\n      <canvas ref=\"pdfCanvas\"></canvas>\r\n    </div>\r\n\r\n    <!-- OCR 结果 -->\r\n    <div class=\"ocr-result\">\r\n      <h2>识别结果</h2>\r\n      <pre>{{ ocrText }}</pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch } from \"vue\";\r\n// ✅ 这里换成 webpack 版本的 pdfjs，自动带 worker\r\nimport * as pdfjsLib from \"pdfjs-dist/webpack\";\r\n\r\nexport default {\r\n  name: \"Results\",\r\n  props: {\r\n    pdfUrl: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n    ocrText: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n  },\r\n  setup(props) {\r\n    const pdfCanvas = ref(null);\r\n\r\n    const renderPdf = async (url) => {\r\n      if (!url) return;\r\n      const loadingTask = pdfjsLib.getDocument(url);\r\n      const pdf = await loadingTask.promise;\r\n      const page = await pdf.getPage(1);\r\n\r\n      const viewport = page.getViewport({ scale: 1.5 });\r\n      const canvas = pdfCanvas.value;\r\n      const context = canvas.getContext(\"2d\");\r\n      canvas.height = viewport.height;\r\n      canvas.width = viewport.width;\r\n\r\n      const renderContext = {\r\n        canvasContext: context,\r\n        viewport: viewport,\r\n      };\r\n      await page.render(renderContext).promise;\r\n    };\r\n\r\n    onMounted(() => {\r\n      if (props.pdfUrl) {\r\n        renderPdf(props.pdfUrl);\r\n      }\r\n    });\r\n\r\n    watch(\r\n      () => props.pdfUrl,\r\n      (newUrl) => {\r\n        if (newUrl) renderPdf(newUrl);\r\n      }\r\n    );\r\n\r\n    return {\r\n      pdfCanvas,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.results {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n}\r\n\r\n.pdf-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.ocr-result {\r\n  width: 100%;\r\n  max-width: 800px;\r\n  background: #f7f7f7;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;;EAECA,KAAK,EAAC;;;EACfC,GAAG,EAAC;AAAW;;EAIpBD,KAAK,EAAC;AAAY;;uBAPzBE,mBAAA,CAWM,OAXNC,UAWM,GAVJC,mBAAA,YAAe,EACJC,MAAA,CAAAC,MAAM,I,cAAjBJ,mBAAA,CAEM,OAFNK,UAEM,GADJC,mBAAA,CAAiC,UAAjCC,UAAiC,8B,wCAGnCL,mBAAA,YAAe,EACfI,mBAAA,CAGM,OAHNE,UAGM,G,0BAFJF,mBAAA,CAAa,YAAT,MAAI,qBACRA,mBAAA,CAAwB,aAAAG,gBAAA,CAAhBN,MAAA,CAAAO,OAAO,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}